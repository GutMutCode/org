#+title: Serial Comm

* What is Serial Communication?
The process of transmitting and receiving data ~one bit at a time~ over a communication channel.

It is widely used in embedded systems because it ~requires only a few wires~ and is relatively simple to implement.

** UART - Universal Asynchronous Receiver/Transmitter
- It used two wires: one for transmitting data(TX) and one for receiving data (RX).
- commonly used for simple point-to-point communication between devices.

*** Asynchronous
There is no separate clock signal; instead, both the transmitter and receiver must agree beforehand on the baud rate

baud rate: data transmission rate

9600 baud rate: transmit 9600 bit per second

** SPI - Serial Peripheral Interface
A synchronous serial communication protocol commonly used to communicate between a master device (such as an MCU) and one or more slave devices (such as sensors or peripheral chips)

- It uses four wires:
  a clock signal(SCK),
  a master output/slave input (MOSI) line,
  a master input/slave output (MISO) line,
  and a chip select (CS) like for each slave device.

** I2C - Inter-Integrated Circuit
Another synchronous serial communication protocol commonly used for communication between multiple devices ~on the same bus~.
It allows multiple devices to be connected to the same bus, each with a unique address, enabling communication between the MCU and various peripheral devices.

- It uses two wires:
  a serial data line (SDA)
  and a serial clock line (SCL)

** CAN - Controller Area Network
A serial communication protocol used primarily in automotive and industrial applications.
It is designed for high reliability and robustness in noisy environments.

- It uses differential two-wire bus(CAN_H and CAN_L)
  and supports multi-master communication
* Components
** Common Protocol
*** Start bit (0)
*** Data bit (5-9)
*** Parity Bit (optional)
*** Stop bit (1 or 2 bit)
Stop ~read~

data packet이나, frame의 끝을 의미하는 비트

1 bit, 2 bit를 주로 사용한다
