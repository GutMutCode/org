#+title: Big O

* What is Big O
A way to ~categorize~ your algorithms time or memory requirements based on input
It is not meant to be an exact measurement
It will not tell you how many CPU cycles it takes, instead it is meant to generalize the growth of your algorithm

** Example
So when someone says Oh of N, they mean your algorithm will grow linearily based on input

* Why do we use it?
Often it will help us make decisions about what data structures and algorithms to use
Knowing how they will perform can greatly help create the best possible program out there

** So lets do a small example
First, Lets consider the follwing code.
#+begin_src typescript
function sum_char_codes(n: string): number {
    let sum = 0;
    for (let i = 0; i < n.length; ++i) {
        sum += n.charCodeAt(i);
    }

    return sum;
}
#+end_src


For thoes that know big o, this is easy
But thoes who have never even classified a function, this may be a complete mystery. That is fine

** Big O, saids differently
As your input grows, how fast does computation or memory grow?

*** Important Concepts
1. growth is with respect to the input

*** In the real world
obviously memory growing is not computationally free, but in the matter of thinking about algorithms,
we don't necessarily think about that.

In language like Go or Javascript you pay even heavier penalties because the memory can be kept around, grows faster, and causes complete halts in your program for cleanup


** Lets go back to our example
Lets look at input. How does our program's execution time grow with respect to input?

#+begin_src typescript
function sum_char_codes(n: string): number {
    let sum = 0;
    for (let i = 0; i < n.length; ++i) {
        sum += n.charCodeAt(i);
    }

    return sum;
}
#+end_src

It may or may not be obvious, but we have an N relationship. O(N) time complexity
- How can you tell?

Simplest trick for complexity

Look for loops

** What's the running time
If the previous was O(N), what's this?
#+begin_src typescript
function sum_char_codes(n: string): number {
    let sum = 0;
    for (let i = 0; i < n.length; ++i) {
        sum += n.charCodeAt(i);
    }

    for (let i = 0; i < n.length; ++i) {
        sum += n.charCodeAt(i);
    }

    return sum
}
#+end_src

*** O(2N)?
NOOOOOOOOOOOOOOOOOOOOOO

*** Important concepts
1. growth is with respect to the input
2. Constants are dropped
   O(2N) -> O(N) and this makes sense.
   That is because Big O is meant to describe the upper bound of the algorithm (the growth of the algorithm)
   The constant eventually becomes irrelevant
