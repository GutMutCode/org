* Erlang Library
  Elixir =provides= excellent interoperability with Erlang libraries.
  In fact, Elixir =discourages= simply =wrapping= Erlang libraries in favor of directly interfacing with Erlang code.
  In this section, we will present some of the most common and useful Erlang functionality that is not found in Elixir.

  As you =grow= more proficient in Elixir, you may want to =explore= the Erlang [[https://www.erlang.org/doc/apps/stdlib/index.html][STDLIB Reference Manual]] in more detail.

** The binary module
   The built-in Elixir String module handles binaries that are UTF-8 encoded.
   [[https://www.erlang.org/doc/man/binary.html][The binary module]] =is= useful when you =are= =dealing= with binary data 
   that =is= not necessarily UTF-8 encoded.
   #+BEGIN_SRC elixir
   String.to_charlist "Ø" #=> [216]
   :binary.bin_to_list "Ø" #=> [195, 152]
   #+END_SRC

   The above example =shows= the difference;
   the ~String~ module =returns= Unicode codepoints, while ~:binary~ =deals= with raw data bytes.

** Formatted text output
   Elixir does not =contain= a function similar to ~printf~ =found= in C and other lanugages.
   Luckily, the Erlang standard library functions ~:io.format/2~ and ~:io_lib.format/8~ may =be= =used=.
   The first formats to terminal output, while the second formats to an iolist.
   The format specifiers differ from ~printf~, refer to [[https://www.erlang.org/doc/man/io.html#format-1][the Erlang documentation]] for details.
   #+BEGIN_SRC elixir
   :io.format("Pi is approximately given by:~10.3f~n", [:math.pi])
   #=> Pi is approximately given by:    3.142
   #=> :ok
   to_string :io_lib.format("Pi is approximately given by:~10.3f~n", [:math.pi])
   #=> "Pi is approximately given by:    3.142\n"
   #+END_SRC

   Also =note= that Erlang's formatting functions =require= special attention to Unicode handling.

** The crypto module
   [[https://www.erlang.org/doc/man/crypto.html][The crypto module]] =contains= hashing functions, digital signatures, encryption and more:
   #+BEGIN_SRC elixir
   Base.encode16(:crypto.hash(:sha256, "Elixir"))
   #=> "3315715A7A3AD57428298676C5AE465DADA38D951BDFAC9348A8A31E9C7401CB"
   #+END_SRC

   The ~:crypto~ module =is= part of the ~:crypto~ application that =ships= with Erlang.
   This =means= you must =list= the ~:crypto~ application as an additional application in your project configuration.
   To =do= this, =edit= your ~mix.exs~ file to include:
   #+BEGIN_SRC elixir
   def application do
     [extra_applications: [:crypto]]
   end
   #+END_SRC

   Any module that =is= not part of the ~:kernel~ or ~:stdlib~ Erlang applications 
   must =have= their application explicitly listed in your ~mix.exs~.
   You can =find= the application name of any Erlang module in the Erlang documentation,
   immediately below the Erlang logo in the sidebar.

** The digraph module
   [[https://www.erlang.org/doc/man/digraph.html][The digraph module]] (as well as [[https://www.erlang.org/doc/man/digraph_utils.html][digraph utils]]) =contains= functions 
   for =dealing= with directed graphs built of vertices and edges.
   After =constructing= the graph, the algorithms in there will =help= =find=,
   for instance, the shortest path between two vertices, or loops in the graph.

   Given three vertices, =find= the shortest path from the first to the last.
   #+BEGIN_SRC elixir
   digraph = :digraph.new()
   coords = [{0.0, 0.0}, {1.0, 0.0}, {1.0, 1.0}]
   [v0, v1, v2] = (for c <- coords, do: :digraph.add_vertex(digraph, c))
   :digraph.add_edge(digraph, v0, v1)
   :digraph.add_edge(digraph, v1, v2)
   :digraph.get_short_path(digraph, v0, v2)
   #=> [{0.0, 0.0}, {1.0, 0.0}, {1.0, 1.0}]
   #+END_SRC

   =Note= that the functions in ~:digraph~ =alter= the graph structure in-place,
   this =is= possible because they =are= =implemented= as ETS tables, =explained= next.

** Erlang Term Storage
   The modules [[https://www.erlang.org/doc/man/ets.html][ets]] and [[https://www.erlang.org/doc/man/dets.html][dets]] =handle= storage of large data structures in memory or on disk respectively.

   ETS =lets= you =create= a table containing tuples.
   By default, ETS tables =are= =protected=, which =means= only the owner process may =write= to the table
   but any other process can =read=.
   ETS =has= some functionality to =allow= a table to =be= =used= as a simple database,
   a key-value store or as a cache mechanism.

   The functions in the ~ets~ module will =modify= the state of the table as a side-effect.
   #+BEGIN_SRC elixir
   table = :ets.new(:ets_test, [])
   # Store as tuples with {name, population}
   :ets.insert(table, {"China", 1_374_000_000})
   :ets.insert(table, {"India", 1_284_000_000})
   :ets.insert(table, {"USA", 322_000_000})
   :ets.i(table)
   #=> <1  > {<<India>>, 1284000000}
   #=> <2  > {<<USA>>, 322000000}
   #=> <3  > {<<China>>, 1374000000}
   #+END_SRC

** The math module
   [[https://www.erlang.org/doc/man/math.html][The math module]] =contains= conmmon mathematical operations covering trigonometry,
   exponential, and logarithmic functions.
   #+BEGIN_SRC elixir
   angle_45_deg = :math.pi() * 45.0 / 180.0
   :math.sin(angle_45_deg)
   #=> 0.7071067811865475
   :math.exp(55.0)
   #=> 7.694785265142018e23
   :math.log(7.694785265142018e23)
   #=> 55.0
   #+END_SRC

** The queue module
   The ~queue~ =is= a data structure that =implements= (double-ended) FIFO(first-in first-out) queses efficiently:
   #+BEGIN_SRC elixir
   q = :queue.new
   q = :queue.in("A", q)
   q = :queue.in("B", q)
   {value, q} = :queue.out(q) 
   value #=> {:value, "A"}
   {value, q} = :queue.out(q)
   value #=> {:value, "B"}
   {value, q} = :queue.out(q)
   value #=> :empty
   #+END_SRC

** The rand module
   [[https://www.erlang.org/doc/man/rand.html][rand]] =has= functions for =returning= random values and =setting= the random seed.
   #+BEGIN_SRC elixir
   :rand.uniform() #=> 0.8123411012391235
   _ = :rand.seed(:exs1024, {123, 123534, 345345})
   :rand.uniform() #=> 0.5820506340260994
   :rand.uniform(6) #=> 6
   #+END_SRC

** The zip and zlib modules
   [[https://www.erlang.org/doc/man/zip.html][The zip module]] lets you read and write ZIP files to and from disk or memory,
   as well as extracting file information.

   This code =counts= the number of files in a ZIP file:
   #+BEGIN_SRC elixir
   :zip.foldl(fn _, _, _, acc -> acc + 1 end, 0, :binary.bin_to_list("file.zip"))
   #=> {:ok, 633}
   #+END_SRC

   [[https://www.erlang.org/doc/man/zlib.html][The zlib module]] deals with data compression in zlib format,
   as found in the ~gzip~ command.
   #+BEGIN_SRC elixir
   song = "
   Mary had a little lamb,
   His fleece was white as snow,
   And everywhere that Mary went,
   The lamb was sure to go."
   compressed = :zlib.compress(song)
   byte_size song #=> 110
   byte_size compressed #=> 99
   #+END_SRC

   Now let's take a look at existing Elixir(and Erlang) libraries you might use while debugging.

