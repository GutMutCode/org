#+title: Installation

* rustup
A command line tool for managing Rust versions and associated tools.

=> install the letest stable version of the Rust compiler.

* Compile and run the file:
#+begin_src bash
$ rustc src/main.rs
$ ./main.rs
Hello, world!
#+end_src

Regardless of you operating system, the string ~Hello, world!~ should print to the terminal.

Let's review this "Hello, world!" program in detail.
Here's the first piece of the puzzle:
#+begin_src rust
fn main() {}
#+end_src

These lines define a fcuntion named ~main~.
The ~main~ function is special: it is always the first code that runs in every executable Rust program.
Here, the first line declares a function named ~main~ that has no parameters and returns nothing.
If there were parameters, they would go inside the parentheses ~()~.

The function body is wrapped in ~{}~.
Rust eqruies curly brackets around all function bodies.
It's good style to place the opening curly bracket on the same line as the function declaration, adding one space in between.

#+begin_quote
If you want to stick to a standard style across Rust projects, you can use an automatic formatter tool called ~rustfmt~ to format your code in a particular style (more on ~rustfmt~ in Appendix D).
The Rust team has included this tool with the standard Rust distribution, as ~rustc~ is, so it should already be installed on your computer!
#+end_quote

** Details
1. Rust style is to indent with four spaces, not a tab.

2. Second, ~println!~ calls a Rust macro. If it had called a function instead, it would be entered as ~println~ (without the ~!~).
   We'll discuss Rust macros in more detail in Chapter 19.
   For now, you just need to know that using a ~!~ means that you're calling a macro instead of a normal function and that macros don't always follow the same rules as functions.

3. You see the "Hello, world!" string.
   We pass this string as an argument to ~println!~, and the string is printed to the screen.

4. We end the line with a semicolon (~;~), which indicates that this expression is over and the next one is ready to begin.
   ~Most lines~ of Rust code end with a semicolon.

** Compiling and Running Are Separate Steps
You've just run a newly created program, so let's examine each step in the process.
=Before running= ~a Rust program~, you =must compile= it using ~the Rust compiler~ by entering the ~rustc~ command and passing it the name of your source file, like this:
#+begin_src bash
rustc main.rs
#+end_src

If you have a C or C++ background, you'll notice that this is similar to ~gcc~ or ~clang~.
After compiling successfully, Rust outputs a binary executable.

On Linux, macOS, and PowerShell on Windows, you can see the executable by entering the ~ls~ command in your shell:
#+begin_src bash
ls
main    main.rs
#+end_src

On Linux and macOS, you'll see two files. With PowerShell on Windows, you'll see the same three files that you would see using CMD. With CMD on Windows, you would enter the following:
#+begin_src bash
main.exe
main.pdb
main.rs
#+end_src
This shows the source code file with the ~.rs~ extension, the executable file (~main.exe~ on Windows, but main on all other platforms), and, when using Windows, a file containing debugging information with the ~.pdb~ extension.
From here, you run the main or main.exe file, like this:
#+begin_src bash
./main # or .\main.exe on Windows
#+end_src

If you're more familiar with a dynamic language, such as Ruby, Python, or JavaScript, you might not be used to compiling and running a program as separate steps.
Rust is =an ahead-of-time compiled language=, meaning you can compile a program and give the executable to someone else, and they can run it even without having Rust installed.

If you give someone a ~.rb~, ~.py~, or ~.js~ file, they need to have a Ruby, Python, or JavaScript implementation installed (respectively).
But in those languages, you only need one command to compile and run your program.
Everything is a trade-off in language design.

Just compiling with ~rustc~ is fine for simple programs, but as your project grows, you'll want to manage all the options and make it easy to share your code.
Next, we'll introduce you to the Cargo tool, which will help you write real-world Rust programs


* Cargo
Rust's build system and package manager.
Most Rustaceans use this tool to manage their Rust projects bacuse Cargo handles a lot of tasks for you,
such as building your code, downloading the libraries your code depends on, and building those libraries.
(We call the libraries that your code needs dependencies.)

If you had built project with Cargo, it would only use the part of Cargo that handles building your code.

Because the vast majority of Rust projects use Cargo, the rest of this book assumes that you're using Cargo too.

** Difference between normal rs file
#+begin_src bash
cargo new my_app
#+end_src
+ use git version control system.
+ make ~Cargo.toml~ file (for dependencies)

*** Compile & Run with Cargo
#+begin_src bash
cargo run
#+end_src

The ~run~ command comes in handy when you need to rapidly iterate on a project
