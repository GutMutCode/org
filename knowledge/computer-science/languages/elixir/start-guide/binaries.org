* Binaries, strings, and charlists
  In "Basic types", we learned a little bit about strings and we used the ~is_binary/1~ function for checks:
  #+BEGIN_SRC elixir
  string = "hello" # "hello"
  is_binary(string) # true
  #+END_SRC

  In this chapter, we will ~gain clarity~ on what exactly binaries are,
  how they relate to strings, and what single-quoted values, ~'like this'~, mean in Elixir.
  Although strings are one of the most common data types in computer languages,
  they are subtly complex and are often misunderstood.
  To understand strings in Elixir, we have to educate ourselves about Unicode and character encodings,
  specifically the UTF-8 encoding.

** Unicode and Code Points
   In order to facilitate meaningful communication between computers across ~multiple languages~,
   a standard is required so that the ones and zeros on one machine mean the same thing when they are transmitted to another.
   The [[https://unicode.org/standard/standard.html][Unicode Standard]] acts as an official registry of virtually all the characters we know:
   this includes characters from classical and historical texts, emoji, and formatting and control characters as well.

   Unicode ~organizes~ all of the characters in its repertoire ~into code charts~,
   and each character is given a unique ~numerical index~.
   This numerical index is known as a [[https://elixir-lang.org/getting-started/binaries-strings-and-char-lists.html][Code Point]]

   In Elixir you can use a ~?~ in front of a character literal to reveal its code point:
   #+BEGIN_SRC elixir
   ?a # 97
   ?≈Ç # 322
   #+END_SRC

   Note that most Unicode code charts will ~refer~ to a code point by its hexadecimal (hex) representation, 
   e.g. ~97~ translates to ~0061~ in hex, and we can represent any Unicode character in an Elixir string 
   by using the ~\uXXXX~ notation and the ~hex representation~ of its code point number:
   #+BEGIN_SRC elixir
   "\u0061" == "a" # true
   0x0061 = 97 = ?a # 97
   #+END_SRC

   The hex representation will also ~help~ you look up information about a code point, 
   e.g. [[https://codepints.net/U+0061]] has a data sheet all about the lower case ~a~, 
   a.k.a. code point 97.

** UTF-8 and Encodings
   #+BEGIN_QUOTE
   Encoding: The one of the way to translates string to binary
   #+END_QUOTE
   Now that we ~understand~ what the Unicode standard is and what code points are,
   we can finally talk about encodings.
   Whereaas the code point is *what* we store, an encoding deals with *how* we store it:
   encoding is an implementation.
   In other words, we need a mechanism to ~convert~ the code point numbers into bytes
   so they can be ~stored~ in memory, ~written~ to disk, etc.

   Elixir ~uses~ UTF-8 encoding its strings, which means that code points are ~encoded~ as a series of 8-bytes.
   UTF-8 ~is~ a *variable width* character encoding that ~uses~ *one to four bytes* to ~store~ each code point.
   It ~is~ capable of encoding all valid Unicode code points.
   Let's see an example:
   #+BEGIN_SRC elixir
   string = "heÃÅllo" # "heÃÅllo"
   String.length(string) # 5 (count of code point)
   byte_size(string) # 6 (literaly byte size)
   #+END_SRC

   Although the string above ~has~ 5 characters, it ~uses~ 6 bytes,
   as two bytes are ~used~ to ~represent~ the character ~√©~.

   Note: if you are ~running~ o Windows, there ~is~ a chance your terminal ~does~ not UTF-8 by default.
   You can ~change~ the encoding of your current session by ~running~ ~chcp 65001~ before entering ~iex~ (iex.bat).

   Besides defining characters, UTF-8 also ~provides~ a notion of graphemes.
   Graphemes may ~consist~ of multiple characters that are often perceived as one.
   For example, the [[https://emojipedia.org/woman-firefighter][woman firefighter emoji]] ~is represented~ as the combination of three characters:
   the woman emoji, a hidden zero-width joiner, and the fire engine emoji:
   #+BEGIN_SRC elixir
   String.codepoints("üë©‚Äçüöí") # ["üë©", "‚Äç", "üöí"]
   String.graphemes("üë©‚Äçüöí") # ["üë©", "‚Äç", "üöí"]
   #+END_SRC

   However, Elixir ~is~ smart enough to know they ~are seen~ as a single character,
   and therefore the length ~is~ still one:
   #+BEGIN_SRC elixir
   String.length("üë©‚Äçüöí") # 1
   #+END_SRC

   Note: if you can't ~see~ the emoji above in your terminal, 
   you need to ~make sure~ your terminal supports emoji 
   and that you ~are~ using a font that can ~render~ them.

   Although these rules may ~sound~ complicated, UTF-8 ~encoded~ documents are everywhere.
   This page itself is encoded in UTF-8.
   The encoding information ~is given~ to your browser 
   which then knows how to ~render~ all of the bytes, characters, and graphemes accordingly.

   If you want to ~see~ the exact bytes that a string would ~be stored~ in a file,
   a common trick ~is~ to concatenate the null byte ~<<0>>~ to it:
   #+BEGIN_SRC elixir
   "he≈Ç≈Ço" <> <<0>> # <<104, 101, 197, 130, 197, 130, 111, 0>>
   #+END_SRC

   Alternatively, you can ~view~ a string's binary representation by using [[https://hexdocs.pm/elixir/IO.html#inspect/2][IO.inspect/2]]:
   #+BEGIN_SRC elixir
   IO.inspect("he≈Ç≈Ço", binaries: :as_binaries) # <<104, 101, 197, 130, 198, 130, 111>>
   #+END_SRC

   We are getting a little bit ahead of ourselves.
   Let's talk about bitstrings to learn about what exactly the ~<<>>~ constructor means.

** Bitstrings
   Although we have ~covered~ code points and UTF-8 encoding,
   we still need to ~go~ a bit deeper into how exactly we ~store~ the encoded bytes,
   and this is where we introduce the ~bitstring~.
   A bitstring ~is~ a fundamental data type in Elixir, ~denoted~ with the ~<<>>~ syntax.
   A bitstring ~is~ a contiguous sequence of bits in memory.

   A complete reference about the binary/bitstring constructor ~<<>>~ 
   can be found in the [[https://hexdocs.pm/elixir/Kernel.SpecialForms.html#%3C%3C%3E%3E/1][Elixir documentation]].

   By default, 8 bits (i.e. 1 byte) is used to ~store~ each number in a bitstring,
   but you can manually ~specify~ the number of bits via a ~::n~ modifier to ~denote~ the size in ~n~ bits,
   or you can ~use~ the more verbose declaration ~::size(n)~:
   #+BEGIN_SRC elixir
   <<42>> == <<42::8>> # true
   <<3::4>> # <<3::size(4)>>
   #+END_SRC

   For example, the decimal number ~3~ when represented with 4 bits in base 2 would be ~0011~,
   which is equivalent to the values ~0, 0, 1, 1~, each stored using 1 bit:
   #+BEGIN_SRC elixir
   <<0::1, 0::1, 1::1, 1::1>> == <<3::4>> # true
   #+END_SRC

   Any value that exceeds what can ~be stored~ by the number of bits provisioned is ~truncated~:
   #+BEGIN_SRC elixir
   <<1>> == <<257>> # true (truncate to same size of bit)
   #+END_SRC
   here, 257 in base 2 would be represented as ~100000001~,
   but since we have ~reserved~ only 8 bits for its representation (by default),
   the left-most bit ~is ignored~ and the value becomes truncated to ~00000001~, or simply ~1~ in decimal.

** Binaries
   A binary ~is~ a bitstring where the number of bits ~is~ divisible by 8(1byte).
   That means that every binary is a bitstring,
   but not every bitstring is a binary.
   We can use the ~is_bitstring/1~ and ~is_binary/1~ functions to demonstrate this.
   #+BEGIN_SRC elixir
   is_bitstring(<<3::4>>) # true
   is_binary(<<3::4>>) # false
   is_bitstring(<<0, 255, 42>>) # true
   is_binary(<<0, 255, 42>>) # true
   is_binary(<<42::16>>) # true
   #+END_SRC

   We can pattern match on binaries/ bitstrings:
   #+BEGIN_SRC elixir
   <<0, 1, x>> = <<0, 1, 2>> # <<0, 1, 2>>
   x # 2
   <<0, 1, x>> = <<0, 1, 2, 3>> # (MatchError) no match of right hand side value: <<0, 1, 2, 3>>
   #+END_SRC

   Note that unless you explicitly use ~::~ modifiers,
   each entry in the binary pattern is expected to match a single byte (exacly 8 bits).
   If we want to match on a binary of unknown size,
   we can use the ~binary~ modifier at the end of the pattern:
   #+BEGIN_SRC elixir
   <<0, 1, x::binary>> = <<0, 1, 2, 3>> # <<0, 1, 2, 3>>
   x # <<2, 3>>
   #+END_SRC

   There are a couple other modifiers that can be useful when doing pattern matches on binaries.
   The ~binary-size(n)~ modifier will amtch ~n~ bytes in a binary.
   #+BEGIN_SRC elixir
   <<head::binary-size(2), rest::binary>> = <<0, 1, 2, 3>> # <<0, 1, 2, 3>>
   head # <<0, 1>>
   rest # <<2, 3>>
   #+END_SRC

   A string =is= a UTF-8 encoded binary,
   where the code point for each character =is= encoded using 1 to 4 bytes.
   Thus every string =is= a binary, but due to the UTF-8 standard encoding rules,
   not every binary =is= a valid string.
   #+BEGIN_SRC elixir
   is_binary("hello") # true
   is_binary(<<239, 191, 19>>) # true
   String.valid?(<<239, 191, 19>>) # false
   #+END_SRC

   The string concatenation operator <> is actually a binary concatenation operator:
   #+BEGIN_SRC elixir
   "hello" <> " " <> "world" # "hello world"
   <<0, 1>> <> <<2, 3>> # <<0, 1, 2, 3>>
   #+END_SRC

   Given that strings are binaries, we can also pattern match on strings:
   #+BEGIN_SRC elixir
   <<head, rest::binary>> = "banana" # "banana"
   head == ?b # true
   rest # "anana"
   #+END_SRC

   However, remember that binary pattern matching works on ~bytes~,
   so matching on the string like "√•ber" with ~multibyte characters~ won't match on the character,
   it will match on the ~first byte~ of that character:
   #+BEGIN_SRC elixir
   "√•" <> <<0>> # <<195, 165, 0>>
   <<x, rest::binary>> = "√•ber" # "√•ber
   x == ?√• # false
   rest # <<165, 98, 101, 114>>
   #+END_SRC

   Above, x matched on only the first byte of the multibyte ~√•~ character.
   Therefore, when patterm matching on strigs, 
   it is important to use the ~utf8~ modifier:
   #+BEGIN_SRC elixir
   <<x::utf8, rest::binary>> = "√•ber" # "√•ber
   x == ?√• # true
   rest # ber
   #+END_SRC

