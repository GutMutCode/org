#+title: Func

* Functions
** Statements Expressions
Function bodies are made up of a series of statements optionally ending in an expression.
So far, the functions we've covered haven't included an ending expression, but you have seen an expression as part of a statement.
Because Rust is an expression-based language, this is an important distiction to understand.
Other languages don't have the same distinctions, so let's look at what statements and expressions are and how their differences affect the bodies of functions.

- *Statements* are instructions that perform some action and do not return a value.
- *Expressions* evaluate to a resultant value.

In some other languages, such as C and Ruby, assignment returns value of itself, but Rust don't
In those languages, you can write ~x = y = 6~ and have both ~x~ and ~y~ have the value ~6~; that is not the case in Rust

Expressions evalutate to a value and make up most of the rest of the code that you'll write in Rust.
Consider a math operation, such as ~5 + 6~, which is  an expression that evalutate to the value ~11~.
Expressions can be part of statements: in Listing 3-1, the ~6~ in the statement ~let y = 6;~ is an expression that evaluates to the value ~6~.
calling a function is an expression.
Caling a macro is an expression.
A new scope block created with curly brackets is an exression, for example:

Filename: src/main.rs
#+begin_src rust
let y = {
    let x = 3;
    x + 1
}; // scope is expression
#+end_src

Is a block that, in this case, evaluates to ~4~.
That value gets bound to ~y~ as part of the ~let~ statement.
Note that the ~x + 1~ line doesn't have a semicolon at the end, which is unlike most of the lines you've seen so far.
Expressions do not include ending semicolons.
If you add a semicolon to the end of an expression, you turn it into statement, and it will then not return a value.
Keep this in mind as you explore function return values and expressions next.
