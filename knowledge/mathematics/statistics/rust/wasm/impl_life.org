#+title: Impl Life

* Design
Before we dive in, we have some design choices to consider.

** Infinite Universe
The Game of Life is played in an infinite universe, but we do not have infinite memory and compute power.
Working around this rather annoying limitation usually comes in one of three flavors:

1. Keep track of which subset of the universe has interesting things happening, and expand this region as needed.
   In the worst case, this expansions is unbounded and the implementation will get slower and slower and eventually run out of memory.

2. Create a fixed-size universe, where cells on the edges have fewer neighbors than cells in the middle.
   The downside with this approach is that infinite patterns, life gliders, that reach the end of the universe are snuffed out.

3. Create a fixed-size, periodic universe, where calls on the edges have neighbors that wrap around to the other side of the universe.
   Because neighbors wrap around the edges of the universe, gliders can keep running forever.

We will implement the third option.

** Interfacing Rust and JavaScript

/This is one of the most important concepts to understand and take away from this tutorial!/

JavaScript's garbage-collected heap--where ~Object~ s, ~Array~ s, and DOM nodes are allocated--is distinct from WebAssembly's linear memory space, where our Rust values live.
WebAssembly currently has no direct access to the garbage-collected heap (as of April 2018, this is expected to change with the [[https://github.com/WebAssembly/interface-types/blob/main/proposals/interface-types/Explainer.md]["Interface Types" proposal]]).
JavaScript, on the other hand, can read and write to the WebAssembly linear memory space, but only as an ~ArrayBuffer~ of scalar values (~u8~, ~i32~, ~f64~, etc...).
WebAssembly functions also take and return scalar values.
These are the building blocks from which all WebAssembly and JavaScript communication is constitued.

~wasm_bindgen~ defines a common understanding of how to work with compound structures acrooss this boundary.
It involves boxing Rust structures, and wrapping the pointer in a JavaScript class for usability, of indexing into a table of JavaScript objects from Rust.
~wasm_bindgen~ is very convenient, but it does not remove the need to consider our data representation, and what values and structures are passed acrooss this boundary.
Instead, think of it as a tool for implementing the intercase design you choose.

When designing an interface between WebAssembly and JavaScript, we want to optimize for the following properties:

1. *Minimizing copying into and out of the WebAssembly linear memory*.
   Unnecessary copies impose unnecessary overhead.

2. *Minimizing serializing and deserializing*.
   Similar to copies, serializing and deserializing also imposes overhead, and often imposes copying as well.
   If we can pass opaque handles to a data structure--instead of serializaing it on one side, copying it into some known location in the WebAssembly linear memory, and deserializing on the other side-- we can often reduce a lot of overhead.
   ~wasm_bindgen~ helps us define and work with opaque handles to JavaScript ~Object~ s or boxed Rust structures.

As a general rule of thumb, a good JavaScript<->WebAssembly interface design is often one where large, long-lived data structures are implemented as Rust types that live in the WebAssembly linear memory, and are exposed to JavaScript as opaque handles.
JavaScript calls exported WebAssembly functions that take these opaque handles, transform their data, perform heavy computations, query the data, and ultimately return a small, copy-able result.
By only returning the small result of the computation we avooid copying and/or serializing everything back and foorth between the JavaScript garbage-collected heap and the WebAssembly linear memory.

** Interfacing Rust and JavaScript in our Game of Life
Let's start by enumerating some hazards to avoid.
We don't want to copy the whole universe into and out of the WebAssembly linear memory on every tick.
We do not want to allocate objects for every cell in the universe, nor do we want to impose a cross-boundary call to read and write each cell.

Where does this leave us?
We can represent the universe as a flat array that lives in the WebAssembly linear memory, and has a byte for each cell.

Here is what a 4 by 4 universe looks like in memory:
[[file:~/Downloads/cs/universe.png]]

To find the array index of the cell at a given row and column in the universe, we can use this formula:
#+begin_src js
index(row, column, universe) = row * width(universe) + column
#+end_src
We have several ways of exposing the universe's cells to JavaScript.
To begin, we will implement ~std::fmt::Display~ for ~Universe~, which we can use to generate a Rust ~String~ of the cells rendered as text characters.
This Rust String is then copied from the WebAssembly linear memory into a JavaScript String in the JavaScript's garbage-collected heap, and is then displayed by setting HTML ~textContent~.
Later in the chapter, we'll evolve this implementation to avoid copying the universe's cells between heaps and to render to ~<canvas>~.

#+begin_quote
Another viable design alternative would be for Rust to return a list of every cell that changed states after each tick, instead of exposing the whole universe to JavaScript.
This way, JavaScript wouldn't need to iterate over the whole universe when rendering, only the relevant subset.
The trade off is that this delta-based design is slightly more difficult to implement.
#+end_quote

** Rust implementation
In this last chapter, we cloned an initial project template.
We well modify that project template now.
Let's begin by removing the ~alert~ import and ~greet~ function from ~src/lib.rs~, and replacing them with a type definition for cells:
#+begin_src rust
#[wasm_bindgen]
#[repr(u8)]
#[derive(Clone, Copy, Debug, PartialEq, Eq)]
pub enum Cell {
    Dead = 0,
    Alive = 1,
}
#+end_src

It is important that we have ~#[repr(u8)]~, so that each cell is represented as a single byte.
It is also important that the ~Dead~ variant is ~0~ and that the ~Alive~ variant is ~1~, so that we can easily count a cell's live neighbors with addition.

Next, let's define the universe.
The universe has a width and a height, and a vector of cells of length ~width * height~.
#+begin_src rust
#[wasm_bindgen]
pub struct Universe {
    width: u32,
    height: u32,
    cells: Vec<Cell>,
}
#+end_src

To access the cell at a given row and column, we translate the row and column into an index into the cells vector, as described earlier:
#+begin_src rust
impl Universe {
    fn get_index(&self, row: u32, column: u32) -> usize {
        (row * self.width + column) as usize
    }

    //..
}
#+end_src

In order to calculate the next state of a cell, we need to get a count of how many of its neighbors are alive.
Let's write a ~live_neighbor_count~ method to do just that!
#+begin_src rust
impl Universe {
    // ...
    fn live_neighbor_count(&self, row: u32, column: u32) -> u8 {
        let mut count = 0;
        for delta_row in [self.height - 1, 0, 1].iter().cloned() {
            for delta_col in [self.width - 1, 0, 1].iter().cloned() {
                if delta_row == 0 && delta_col == 0 {
                    continue;
                }

                let neighbor_row = (row + delta_row) % self.height;
                let neighbor_col = (column + delta_col) % self.width;
                let idx = self.get_index(neighbor_row, neighbor_col);
                count += self.cells[idx] as u8.aliv;
            }
        }
        count
    }
}
#+end_src

The ~live_neighbor_count~ method uses deltas and modulo to avoid special casing the edges of the univers with ~if~ s.
When applying a delta of ~-1~, we /add/ ~self.height - 1~ and let the modulo do its thing, rather than attempting to subtract ~1~.
=What is delta?=
