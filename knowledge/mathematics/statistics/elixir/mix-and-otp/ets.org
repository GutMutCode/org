#+title: Ets

* ETS
** ETS as a cache
ETS allows us to store any Elixir term in an in-memory table.
Working with ETS tables is done via [[https://www.erlang.org/doc/man/ets.html][Erlang's :etc module]]:
#+begin_src elixir
table = :etc.new(:buckets_registry, [:set, :protected])
#Reference<0.1885502827.460455937.234656>
:ets.insert(table, {"foo", self()}) #=> true
:ets.lookup(table, "foo") #=> [{"foo", #PID<0.41.0>}]
#+end_src

When creating an ETS table, two arguments =are required=: the table name and a set of options.
(table name: bucket_registry)

From the available options, we passed the table type and its access rules.
We have chosen the ~:set~ type, which means that keys *cannot be duplicated*.
We've also set the table's access to ~:protected~, meaning only the process that created the table can write to it, but all processes can read from it.
The possible access controls:

~:public~ - Read/Write available to all processes.

~:protected~ - Read available to all processes. Only writable by owner process. This is the default

~:private~ - Read/Write limited to owner process.

Be aware that if your Read/Write call violates the access control, the operation will raise ~ArgumentError~.
Finally, since ~:set~ and ~:protected~ are the default values, we will skip them from now on.

ETS tables can also be named, allowing use to access them by a given name:
#+begin_src elixir
:ets.new(:buckets_registry, [:named_table]) #=> :buckets_registry
:ets.insert(:buckets_registry, {"foo", self()}) #=> true
:ets.lookup(:buckets_registry, "foo") #=> [{"foo", #PID<0.41.0>}]
#+end_src

Let's change the ~KV.Registry~ to use ETS tables.
The first change is to modify our registry to require a name argument, we will use it  to name the ETS table and the registry process itself.
ETS names and process names are stored in different locations, so there is no chance of conflicts.

Open up ~lib/kv/registry.ex~, and let's change its implementation.
We've added comments to the source code to highlight the changes we've made:
#+begin_quote
[[file:~/devs/personal/elixir/kv/lib/kv/registry.ex][registry.ex]]
#+end_quote

Notice that before our changes ~KV.Registry.lookup/2~ sent requests to the server, but now it read directly from the ETS table, which is shared across all processes.
That's the main idea behind the cache mechanism we are implementing.

In order for the cache mechanism to work, the created ETS table needs to have access ~:protected~ (the default),so all client can read from it, while only the ~KV.Registry~ process writes to it.
We have also set ~read_concurrency: true~ when starting the table, optimizig the table for the common scenario of concurrent read operations.

The changes we have performed above have broken our tests because the registry requires the ~:name~ option when starting up.
Furthermore, some registry operations such as ~lookup/2~ require the name to be given as an argument, instead of a PID, so we can do the ETS table lookup.
Let's change the setup function in ~test/kv/registry_test.exs~ to fix both issues:
...

Since each test has a unique name, we use the test name to name our registries.
This way, we no longer need to pass the registry PID around, instead we identify it by the test name.
Also note we assigned the result of ~start_supervised!~ to underscore(~_~).
This idiom is often used to signal that we are not interested in the result of ~start_supervised!~.

Once we change ~setup~, some tests will continue to fail.
You may even notice tests pass and fail inconsistently between runs.
For example, the "spawns buckets" test:
#+begin_src elixir
test "spawns buckets", %{registry: registry} do
  assert KV.Registry.lookup(registry, "shopping") == :error

  KV.Registry.create(registry, "shopping")
  assert {:ok, bucket} = KV.Registry.lookup(registry, "shopping")

  KV.Bucket.put(bucket, "milk", 1)
  assert KV.Bucket.get(bucket, "milk") == 1
end
#+end_src

May be failing in this line:
#+begin_src elixir
{:ok, bucket} = KV.Registry.lookup(registry, "shopping")
#+end_src

How can this line fail if we just created the bucket in the previous line?

The reason those failures are happening is because, for didactic purposes, we have made two mistakes:
1. We are prematurely optimizing (by adding this cache layer)
2. We are using ~cast/2~ (while we should be using ~call/2~)

** Race conditions?
Developing in Elixir does not make your code free of race conditions.
However, Elixir's abstractions where nothing is shared by default make it easier to spot a race condition's root cause.

What is happening in our tests is that there is a delay in between an operation and the time we can observe this change in the ETS table.
Here is what we were expecting to happen:
1. We invoke ~KV.Registry.create(registry, "shopping")~
2. The registry creates the bucket and updates the cache table
3. We access the information from the table with ~KV.Registry.lookup(registry, "shopping")~
4. The command above returns ~{:ok, bucket}~

However, since ~KV.Registry.create/2~ is a =cast= operation, the command will return before we actually write to the table!
In other words, this is happening:
1. We invoke ~KV.Registry.create(registry, "shopping")~
2. We access the information from the table with ~KV.Registry.lookup(registry, "shopping")~
3. The command above returns ~:error~
4. The registry creates the bucket and updates the cache table

To fix the failure we need to make ~KV.Registry.create/2~ synchronous by using ~call/2~ rather than ~cast/2~.
This will guarantee that the client will only continue after changes have been made to the table.
Let's go back to ~lib/kv/registry.ex~ and change the function and its callback as follows:
#+begin_src elixir
def create(server, name) do
  GenServer.call(server, {:create, name})
end
#+end_src

#+begin_src elixir
@impl true
def handle_call({:create, name}, _from, {names, refs}) do
  case lookup(names, name) do
    {:ok, pid} ->
      {:reply, pid, {names, refs}}
    :error ->
      {:ok, pid} = DynamicSupervisor.start_child(KV.BucketSupervisor, KV.Bucket)
      ref = Process.monitor(pid)
      refs = Map.put(refs, pid, name)
      :ets.insert(names, {name, pid})
      {:reply, pid, {names, refs}}
  end
end
#+end_src

We changed the callback from ~handle_cast/2~ to ~handle_call/3~ and changed it to reply with the pid of the created bucket.
Generally specking, Elixir developers prefer to use ~call/2~ instead of ~cast/2~ as it also provides back-pressure - you block until you get a reply.
Using ~cast/2~ when not necessary can also be considered a prematrue optimization.

Let's run the tests once again.
This time though, we will pass teh ~--trace~ option:
#+begin_src bash
mix test --trace
#+end_src

The ~--trace~ option is useful when your tests are deadlocking or there are race conditions, as it runs all tests synchronously (~async: true~ has no effect) and shows detailed information about each test.
If you drun the tests multiple tims you may see this intermittent failure.
#+begin_src elixir
1) test removes buckets on exit (KV.RegistryTest)
   test/kv/dregistry_test.exs:19
   Assertion with == failed
   code:  assert KV.Registry.lookup(registry, "shopping") == :error
   left:  {:ok, #PID<0.109.0>}
   right: :error
   stacktrace:
     test/kv/registry_test.exs:23
#+end_src

According to the failure message, we are expecting that the bucket no longer exists on the table, but it still does!
This problem is the opposite of the one we ahve just solved: while previously there was a delay between the command to create a bucket and updating the table, now there is a delay between the bucket process dying and its entry being removed from the table.
Since this is a race condition, you may not be able to reproduce it on your machine, but it is there.

Last time we fixed thre race condition by replacing the asynchronous operation, a ~cast~, by a ~call~, which is synchronous.
Unfortunately, the ~handle_info/2~ callback we are using to receive the ~:DOWN~ message and delete the entry from the ETS table does not have a synchronous equivalent.
This time, we need to find a way to guarantee the registry has proccessed the ~:DOWN~ notification sent when the bucket process terminated.

An easy way to do so is by sending a synchronous request to the registry before we do the bucket lookup.
The ~Agent.stop/2~ operation is synchronous and only returns after the bucket process terminates and all ~:DOWN~ messages are delivered.
Therefore, once ~Agent.stop/2~ returns, the registry has already received the ~:DOWN~ message but it may not have processed it you.
In order to guarantee the processing of the ~:DOWN~ message, we can do a synchronous request.
Since messages are processed in order, once the registry replies to the synchronous request, then the ~:DOWN~ message will definitely have been processed.

Let's do so by creating a "bogus" bucket, which is a synchronous request, after ~Agent.stop/2~ in both "remove" tests at ~test/kv/registry_test.exs~:
#+begin_src elixir
test "removes buckets on exit", %{registry: registry} do
  KV.Registry.create(registry, "shopping")
  {:ok, bucket} = KV.Registry.lookup(registry, "shopping")
  Agent.stop(bucket)

  # Do a call to ensure the registry processed the DOWN message
  _ = KV.Registry.create(registry, "bogus")
  assert KV.Registry.lookup(registry, "shopping") == :error
end

test "removes bucket on crash", %{registry: registry} do
  KV.Registry.create(registry, "shopping")
  {:ok, bucket} = KV.Registry.lookup(registry, "shopping")

  # Stop the bucket with non-normal reason
  Agent.stop(bucket, :shutdown)

  # Do a call to ensure the registry processed the DOWN message
  # assert KV.Registry.lookup(registry, "shopping") == :error
  _ = KV.Registry.create(registry, "bogus")
  assert KV.Registry.lookup(registry, "shopping") == :error
end
#+end_src

Our test should now (always) pass!

Note that the purpose of the test is to check whether the registry processes the bucket's shutdown message correctly.
The fact that the ~KV.Registry.lookup/2~ sends us a valid bucket does not mean that the bucket is still alive by the time you call it.
For example, it might have crashed for some reason.
The following test depicts this situation:
#+begin_src elixir
test "bucket can crash at any time", %{registry: registry} do
  KV.Registry.create(registry, "shopping")
  {:ok, bucket} = KV.Registry.lookup(registry,"shopping")

  # Simulate a bucket crash by explicitly and synchronously shutting it down
  Agent.stop(bucket, :shutdown)

  # Now trying to call the dead process causes a :noproc exit
  catch_exit KV.Bucket.put(bucket, "milk", 3)
end
#+end_src

This concludes our optimization chapter.
We have used ETS as a cache mechanism where reads can happen from any processes but writes are stil serialized through a single process.
More importantly, we have also learned that once data can be read asynchronously, we need to be aware of the race conditions it might introduce.

In practice, if you find yourself in a position where you need a process registry for dynamic processes, you should use [[https://hexdocs.pm/elixir/Registry.html][the Registry module]] provided as part of Elixir.
It provides functionality similar to the one we have built using a GenServer + ~:ets~ while also being able to perform both writes and reads concurrently.
It has been [[https://elixir-lang.org/blog/2017/01/05/elixir-v1-4-0-released/][benchmarked to scale across all cores even on machines with 40 cores]].

Next, let's discuss external and internal dependencies and how Mix helps us manage large codebases.
