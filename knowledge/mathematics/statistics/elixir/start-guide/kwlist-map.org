* Table of Contents :toc:
- [[#keyword-lists-and-maps][Keyword lists and maps]]
  - [[#keyword-lists][Keyword lists]]
  - [[#do-blocks-and-keywords][do-blocks and keywords]]
  - [[#maps-as-key-value-pairs][Maps as key-value pairs]]
  - [[#maps-of-fixed-keys][Maps of fixed keys]]
  - [[#nested-data-structures][Nested data structures]]
  - [[#summary][Summary]]

* Keyword lists and maps
Now let's =talk= about associative data structures.
Associative data structrues =are= able to =associate= a key to a certain value.
Different languages =call= these different names like dictionaries, hashs, associative arrays, etc.
In Elixir, we =have= two main associative data structures: ~keyword lists~ and ~maps~.

** Keyword lists
Keyword lists =are= a data-structure =used= to =pass= options to function.
=Imagine= you =want= to =split= a string of numbers.
We can use ~String.split/2~:
#+BEGIN_SRC elixir
String.split("1,2,3,4,5", ",") # ["1", "2", "3", "4", "5"]
#+END_SRC

However, what =happens= if there =is= an additional space between the numbers:
#+BEGIN_SRC elixir
String.split("1  2  3", " ") # ["1", "", "2", "", "3"]
#+END_SRC

As you can =see=, there =are= now empty strings in our results.
Luckily, the ~String.split/3~ function allows the ~trim~ option to be set to true:
#+BEGIN_SRC elixir
# you need to write " " after the trim:
String.split("1  2  3", " ", [trim: true]) # ["1", "2", "3"]
#+END_SRC

~[trim: true]~ is a keyword list.
Furthermore, when a keyword list is the last argument of a function,
we can skip the brackets and write:
#+BEGIN_SRC elixir
String.split("1  2  3", " ", trim: true) # ["1", "2", "3"]
#+END_SRC

As the name implies, keyword lists =are= simply lists.
In particular, they =are= lists consisting of 2-item tuples
where the first element (they key) =is= an atom and the second element can =be= any value.
Both representations are the same:
#+BEGIN_SRC elixir
[{:trim, true}] == [trim: true] # true
#+END_SRC

Since keyword lists are lists, we can use all operations available to lists.
For example, we can use `++` to add new values to a keyword list:
#+BEGIN_SRC elixir
list = [a: 1, b: 2] # [:a, 1, :b, 2]
list ++ [c: 3] # [:a, 1, :b, 2, :c, 3]
[a: 0: ++ list] # [:a, 0, :a, 1, :b, 2]
#+END_SRC

You can read the value of a keyword list using the brackets syntax:
#+BEGIN_SRC elixir
list[:a] # 1
list[:a] # 2
#+END_SRC

In case of duplicate keys, values added to the front are the ones fetched:
#+BEGIN_SRC elixir
new_list = [a: 0] ++ list # [:a, 0, :a, 1, :b, 2]
new_list[a] # 0
#+END_SRC

Keyword lists are important because they have three special characteristics:
  - Keys must be atoms.
  - Keys are ordered, as specified by the developer.
  - Keys can be given more than once.

    For example, [[https://github.com/elixir-ecto/ecto][the Ecto library]] makes use of these features
    to provide an elegant DSL for writing database queries:
    #+BEGIN_SRC elixir
query =
  from w in Weather,
  where: w.prcp > 0,
  where: w.temp < 20,
  select: w
    #+END_SRC

    Although we can pattern match on keyword lists,
    it is rarely done in practive since pattern matching on lists requires the number of
    items and their order to match:
    #+BEGIN_SRC elixir
[a: a] = [a: 1] # [a: 1]
a # 1
[a: a] = [a: 1, b: 2] # (MatchError) no match of right hand side value: [a: 1, b: 2]
[b: b, a: a] = [a: 1, b: 2] # (MatchError) no match of right hand side value: [a: 1, b: 2]
    #+END_SRC

    In order to manipulate keyword lists, Elixir provides the [[https://hexdocs.pm/elixir/Keyword.html][Keyword]] module.
    Remember, though, keyword lists are simply lists, and as such they provide the same linear
    performance characteristics as them: the longer the list, athe longer it will take to find a key,
    to count the number of items, and so on.
    For this reason, keyword lists are used in Elixir mainly for ~passing~ optional values.
    If you need to ~store~ many items or ~gurantee~ on-key associates with at maximum on-vlaue,
    you should use maps instead.

** do-blocks and keywords
As we have seen, keywords are mostly used in the language to pass optional values.
In fact, we have used keywords before in this guide. For example, we have seen:
#+BEGIN_SRC elixir
if true do
  "This will be seen"
else
  "This won't"
end # "This will be seen"
#+END_SRC

It happens that ~do~ blocks are nothing more than a syntax convenience on top of keywords.
We can rewrite the above to:
#+BEGIN_SRC elixir
if true, do: "This will be seen", else: "This won't" # "This will be seen"
#+END_SRC

Pay close attention to both syntaxes.
In the keyword list format, we separate each key-value pair with commas,
and each key is followed by ~:~.
In the ~do~-blocks, we get rid of the colons, the commas, and separate each keyword by a newline.
They are use ful exactly becuase they remove the verbosity when writing blocks of code.
Most of the time, you will use the block syntax, but it is good to know they are equivalent.

Note that only a handful of keyword lists can be converted to blocks:
~do~, ~else~ , ~catch~, ~rescue~, and ~after~.
Those are all the keywords used by Elixir control-flow constructs.
We have already learned some of them and we will learn others in the future.

With this out of the way, let's see how we can work with nested data structures.

** Maps as key-value pairs
Whenever you need to store key-value pairs, maps are the "go to" data structure in Elixir.
A map is created using the ~%{}~ syntax.
#+BEGIN_SRC elixir
map = %{:a => 1, 2 => :b} # %{2 => :b, :a => 1}
map[:a] # 1
map[2] # :b
map[:c] # nil
#+END_SRC

Compared to keyword lists, we can already see two differences:
  - Maps allow any value as a key.
  - Maps' keys do not follw any ordering.

    In contrast to keyword lists, maps are very useful with pattern matching.
    When a map is used in a pattern, it will always match on a subset of the given value:
    #+BEGIN_SRC elixir
%{} = %{:a => 1, 2 => :b} # %{2 => :b, :a => 1}
%{:a => a} = %{:a => 1, 2 => :b} # %{2 => :b, :a => 1}
a # 1
%{:c => c} = %{:a => 1, 2 => :b} # (MatchError) no match of right hand side value: %{2 => :b, :a => 1}
    #+END_SRC

    As shown above, a map matches as long as the keys in the pattern exist in the given map.
    Therefore, an empty map matches all maps.

    THe [[https://hexdocs.pm/elixir/Map.html][Map]] module provides a very similar API to the ~Keyword~ module
    with convenience fcuntions to add, remove, adn update maps keys:
    #+BEGIN_SRC elixir
Map.get(%{:a => 1, 2 => :b}, :a) # 1
Map.put(%{:a => 1, 2 => :b}, :c, 3) # %{2 => :b, :a => 1, :c => 3}
Map.to_list(%{:a => 1, 2 => :b})
[{2, :b}, {:a, 1}]
    #+END_SRC

** Maps of fixed keys
In the previous section, we have used maps as a key-value data structure
where keys can be added or removed at any time.
However, it is also common to create maps with a ~predefined~ set of keys.
Their values may be updated, but new keys are never added nor removed.
This is useful when we ~know~ the shape of the data we are working with and,
if we get a different key, it likely means a mistake was done elsewhere.

We difine such maps using the same syntax as in the previous section,
except that all keys must be ~atoms~:
#+BEGIN_SRC elixir
map = %{:name => "John", :age => 23} # %{name: "John", age: 23}
#+END_SRC

As you can see from the printed result above, Elixir also ~allows~ you to ~write~ maps of atom keys
using the same ~key: value~ syntax as keyword lists.

This syntax ~has~ one large benefit in that it ~raises~ if the key does not ~exist~ in the map.
Sometimes the Elixir compiler may even warn too.
This makes it useful to ~get quick~ feedback and spot bugs and typos early on.
This is also the syntax used to ~power~ another Elixir feature called "Structs".

Elixir developers typically ~prefer~ to use the ~map.key~ syntax and pattern matching
instead of the functions in the ~Map~ module when working with maps
because they ~lead~ to an assertive style of programming.
   
[[https://dashbit.co/blog/writing-assertive-code-with-elixir][This]] blog post by JosÃ© Valim provides insite and examples
on how you get more concise and faster software by writing assertive code in Elixir.

** Nested data structures
Often we will have maps inside maps, or even keywords lists inside maps, and so forth.
Elixir ~provides~ conveniences for manipulating nested data structures via the
~put_in/2~, ~update_in/2~ and other macros giving the same conveniences you would find
in imperative laguages while keeping the immutable properties of the language.

Imagine you have the following structure:
#+BEGIN_SRC elixir
users = [
  john: %{name: "John", age: 27, languages: ["Erlang", "Ruby", "Elixir"]},
  mary: %{name: "Mary", age: 29, languages: ["Elixir", "F#", "Clojure"]}
]
# [
#   john: %{age: 27, languages: ["Erlang", "Ruby", "Elixir"], name: "John"},
#   mary: %{age: 29, languages: ["Elixir", "F#", "Clojure"], name: "Mary"}
# ]
#+END_SRC

We have a keyword list of users where each value is a map containing the name, age and a list of
programming lanugages each user likes. If we wanted to access the age for john, we could write:
#+BEGIN_SRC elixir
users[:john].age # 27
#+END_SRC

It happens we can also use this same syntax for updating the value:
#+BEGIN_SRC elixir
users = put_in users[:john].age, 31
# [
#   john: %{age: 31, languages: ["Erlang", "Ruby", "Elixir"], name: "John"},
#   mary: %{age: 29, languages: ["Elixir", "F#", "Clojure"], name: "Mary"}
# ]
#+END_SRC

The ~update_in/2~ macro is simailar but ~allows~ us to ~pass~ a function that
controls how the value changes.
For example, let's remove "Clojure" from Mary's list of languages:
#+BEGIN_SRC elixir
users = update_in users[:mary].languages, fn languages -> List.delete(languages, "Clojure") end
# [
#   john: %{age: 31, languages: ["Erlang", "Ruby", "Elixir"], name: "John"},
#   mary: %{age: 29, languages: ["Elixir", "F#"], name: "Mary"}
# ]
#+END_SRC

There is mroe to lean about ~put_in/2~ and ~update_in/2~, including the ~get_and_update/2~
that ~allows~ us to ~extract~ a value and ~update~ the data structure _at once_.
There are also ~put_in/3~, ~update_in/3~ and ~get_and_update_in/3~
which allow dynamic access into the data structure.
[[https://hexdocs.pm/elixir/Kernel.html][Check their respective documentation in the ~Kernel~ module for more information]].
Between the ~Access~ module and pattern matching, Elixir developers ~have~ a rich set of tools
for ~manipulating~ nested and complex data structures.

** Summary
This concludes our introduction to associative data structures in Elixir.
As a summary, you should:
- Use keyword lists for ~passing~ _optional values to functions_
- Use maps for general key-value data structures and when working with known data (with fixed keys)

Now we can move on to talk about modules and functions.
