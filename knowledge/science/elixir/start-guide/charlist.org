* Charlists
  Our tour of our bitstrings, binaries, and strings is nearly complete,
  but we have one more data type to explain: the charlist.

  A charlist is a list of integers where all the integers are ~valid code points~.
  In practice, you will not come across them often, only in specific scenarios
  such as interfacing with older Erlang libraries that do not accept binaries as arguments.
  #+BEGIN_SRC elixir
  ~c"hello" # ~c"hello"
  [?h, ?e, ?l, ?l, ?o] # ~c"hello"
  #+END_SRC

  The ~c sigil indicates the fact that we are dealing with a charlist and not a regular string.

  Whereas double-quotes creates strings, single-quotes create charlist literals.
  Charlists used to be represented with sigle quotes in Elixir <1.15:
  #+BEGIN_SRC elixir
  'hello' # ~c"hello"
  #+END_SRC

  The key takeaway is taht ~"hello"~ is not the same as ~'hello'~.
  Generally speaking, double-quotes must always be used to represent strings in Elixir.
  In any case, let's learn how charlists work.

  Instead of containing bytes, a charlist contains integer code points.
  However, the list is only printed in single-quotes if all code points are within the ASCII range:
  #+BEGIN_SRC elixir
  ~c"hełło" # [104, 101, 322, 322, 111]
  is_list(~c"hełło") # true
  #+END_SRC

  Interpreting intergers as code points may lead to some surprising behavior.
  For example, if you are stroing a list of intergers that happen to rage between 0 and 127,
  by default IEx will ~interpret~ this as a ~charlist~ and it will ~display~ the corresponding ASCII characters.
  #+BEGIN_SRC elixir
  heartbeats_per_minute = [99, 97, 116] # ~c"cat"
  #+END_SRC

  You can convert a charlist to a string and back by using the ~to_string/1~ and ~to_charlist/1~w functions:
  #+BEGIN_SRC elixir
  to_charlist("hełło") # [104, 101, 322, 322, 111]
  to_string(~c"hełło") # "hełło"
  to_string(:hello) # "hello"
  to_string(1) # "1"
  #+END_SRC

  Note that those functions are polymorphic - not only do they convert charlists to strings,
  they also operate on integers, atoms, and so on.

  String (binary) concatenation uses the ~<>~ operator but charlists, being lists,
  use the ~list concatenation~ operator `++`:
  #+BEGIN_SRC elixir
  ~c"this " <> ~c"fails"
  # (ArgumentError) expected binary argument in <> operator but got: ~c"this "
  ~c"this " ++ ~c"works" # ~c"this works"
  "he" ++ "llo" # (ArgumentError)  argument error :erlang.++("he", "llo")
  "he" <> "llo" # "hello"
  #+END_SRC

  With binaries, strings, and charlists out of the way,
  it is time to talk about key-value data structures.

