* Processes
In Elixir, all code =runs= inside processes.
Processes are =isolated= from each other,
=run= concurrent to one another and =communicate= via message =passing=.
Processes are not only the basis for concurrency in Elixir,
but they also =provide= the means for =building= distributed and fault-tolerant programs.

Elixir's processes should not be =confused= with operating system processes.
Processes in Elixir =are= extremely lightweight in terms of memory and CPU
(even compared to threads as used in many other programming languages).
Because of this, it =is= not uncommon to =have= tens or even hundreds of thousands of processes
=running= simultaneously.

In this chapter, we will =learn= about the basic constructs for =spawning= new processes,
as well as =sending= and =receiving= messages between processes.
  
** spawn
The basic mechanism for spawning new processes =is= the auto-imported ~spawn/1~ function.
#+BEGIN_SRC elixir
spawn(fn -> 1 + 2 end) #PID<0.43.0>
#+END_SRC

~spawn/1~ =takes= a function which it will =execute= in another process.

Notice ~spawn/1~ =returns= a PID (process identifier).
At this point, the process you spawned =is= very likely dead.
The spawned process will =execute= the given function and =exit= after the function is =done=:
#+BEGIN_SRC elixir
pid = spawn(fn -> 1 + 2 end) #PID<0.44.0>
Process.alive?(pid) #=> true
#+END_SRC
/Note: you will likely =get= differnet process identifiers/
/than the ones we are =getting= in this guide./

We can =retrieve= the PID of the current process by =calling= ~self/0~:
#+BEGIN_SRC elixir
self() #=> PID<0.41.0>
Process.alive?(self()) #=> true
#+END_SRC

Processes =get= much more interesting when we are able to =send= and =receive= messages.

** =send= and =receive=
We can =send= messages to a process with ~send/2~ and =receive= them with ~receive/1~:
#+BEGIN_SRC elixir
send(self(), {:hello, "world"}) #=> {:hello, "world"}
receive do
  {:hello, msg} -> msg
  {:world, _msg} -> "won't match"
end #=> "world"
#+END_SRC

When a message is =sent= to a process, the message is =stored= in the process mailbox.
The ~receive/1~ block =goes= through the current process mailbox =searching= for a message
that =matches= any of the given patterns.
~receive/1~ =supports= guards and many clauses,such as ~case/2~.

The process that =sends= the message does not =block= on ~send/2~,
it =puts= the message in the recipient's mailbox and =continues=.
In particular, a process can =send= messages to itself.

*If there =is= no message in the mailbox =matching= any of the patterns*,
the current process will =wait= until a matching message =arrives=.
A timeout can also be =specified=:
#+BEGIN_SRC elixir
receive do
  {:hello, msg} -> msg
after
  1_000 -> "nothing after 1s"
end #=> "nothing after 1s"
#+END_SRC

A timeout of 0 can be =given= when you already =expect= the message to =be= in the mailbox.
Let's =put= it all together and =send= messages between processes:
#+BEGIN_SRC elixir
parent = self() #PID<0.41.0>
spawn(fn -> send(parent, {:hello, self()}) end) #PID<0.48.0>
receive do
  {:hello, pid} -> "Got hello from #{inspect pid}"
end #=> "Got hello from #PRD<0.48.0>"
#+END_SRC

The ~inspect/1~ function is =used= to =convert=
a data structure's internal representation into a string, typically for printing.
Notice that when the ~receive~ block gets =executed=
the sender process we have =spawned= may already be dead,
as its only instruction =was= to send a message.

While in the shell, you may =find= the helper ~flush/0~ quite useful.
It =flushes= and =prints= all the messages in the mailbox.
#+BEGIN_SRC elixir
send(self(), :hello) #=> :hello
flush() #=> :hello :ok
#+END_SRC

** Links
The majority of times we spawn processes in Elixir,
we spawn them as linked processes.
Before we =show= an example with ~spawn_link/1~,
let's =see= what =happens= when a process =started= with ~spawn/1~ fails:
#+BEGIN_SRC elixir
spawn(fn -> raise "oops" end) #PID<0.58.0>
# [error] Process #PID<0.58.00> raised an exceptioh
# ** (RuntimeError) oops
#+END_SRC

It merely =logged= an error but the parent process =is= still =running=.
That's because processes are =isolated=.
If we =want= the failure in one process to =propagate= to another one, we should =link= them.
This can be done with ~spawn_link/1~:
#+BEGIN_SRC elixir
self() #=> PID<0.58.0>
spawn_link(fn -> raise "oops" end)
# ** (EXIT from #PID<0.58.0>) evaluator process exited with reason: an exception was raised
# ** (RuntimeError) oops

# [error] Process #PID<0.289.0> raised an exception
# ** (RuntimeError) oops
#+END_SRC
Because processes are =linked=, we now =see= a message saying the parent process,
which =is= the shell process, has =received= an EXIT signal
from another process =causing= the shell to =terminate=.
IEx =detects= this situation and =starts= a new shell session.

Linking can also be done manually by calling ~Process.link/1~.
We recommend that you take a look at [[https://hexdocs.pm/elixir/Process.html][the Process module]] for other functionality =provided= by processes.

Processes and links =play= and important role when =building= fault-tolerant systems.
Elixir processes are =isolated= and don't =share= anything by default.
Therefore, a failure in a process will never =crash= or =corrupt= the state of another process.
Links, however, =allow= processes to =establish= a relationship in case of failure.
We often =link= our processes to supervisors
which will =detect= when a process =dies= and =start= a new process in its place.

While other languages would =require= us to catch/handle exceptions,
in Elixir we =are= actually fine with =letting= processes fail
because we =expect= supervisors to properly =restart= our systems.
"Failing fast" (sometimes =referred= as "=let= it crash")
=is= a common philosophy when =writing= Elixir software!

~spawn/1~ and ~spawn_link/1~ are the basic primitives for =creating= processes in Elixir.
Although we have =used= them exclusively so far,
most of the time we are =going= to =use= abtractions that =build= on top of them.
Let's =see= the most common one, =called= tasks.

** Tasks
Tasks =build= on top of the spawn functions to =provide= better error reports and introspection:
#+BEGIN_SRC elixir
Task.start(fn -> raise "oops" end) #=> {:ok, #PID<0.58.0>}

# 14:22:33.046 [error] Task #PID<0.58.0> started from #PID<0.55.0> terminating
# ** (RuntimeError) oops
# (stdlib)
# (elixir)
# (stdlib)
# Function: #Function<20.99386804/0 in :erl_eval.expr/5>
# Args: []
#+END_SRC
Instead of ~spawn/1~ and ~spawn_link/1~, we use ~Task.start/1~ and ~Task.start_link/1~
which return ~{:ok, pid}~ rather than just the PID.
This =is= what =enables= tasks to be =used= in supervision trees.
Furthermore, ~Task~ =provides= convenience functions,
like ~Task.async/1~ and ~Task.await/1~, and functionality to =ease= distribution.

We will =explore= those fuctionalities in the *Mix and OTP guide*, for now
It =is= enough to =remember= to =use= ~Task~ to =get= better error reports.

** State
We haven't =talked= about state so far in this guide.
If you are =building= an application that =requires= state,
for example, to =keep= your application configuration,
or you =need= to =parse= a file and =keep= it in memory,
where would you =store= it?

Processes =are= the most common answer to this question.
We can =write= processes that =loop= infinitely, =maintain= state, and =send= and =recieve= messages.
As an example, let's =write= a module that =starts= new processes
that =work= as a key-value store in a file named ~kv.exs~:

#+BEGIN_SRC elixir
defmodule KV do
  def start_link do
    Task.start_link(fn -> loop(%{}) end)
  end

  defp loop(map) do
    receive do
      {:get, key, caller} ->
        send caller, Map.get(map, key)
        loop(map) # wait again
      {:put, key, value} ->
        loop(Map.put(map, key, value)) # wait again
    end
  end
end
#+END_SRC

Note that the ~start_link~ function =starts= a new process
that =runs= the ~loop/1~ function, starting with an empty map.
The ~loop/1~ (private) function then =waits= for messages (there are no matches)
and =performs= the appropriate action for each message.
We made ~loop/1~ private by using ~defp~ instead of ~def~.
In the case of a ~:get~ message, it =sends= a message back to the caller and =calls= ~loop/1~ again,
to =wait= for a new message.
While the ~:put~ message actually =invokes= ~loop/1~ with a new version of the map,
with the given ~key~ and ~value~ stored.

Let's give it a try by running ~iex kv.exs~:
#+BEGIN_SRC elixir
{:ok, pid} = KV.start_link() #=> {:ok, #PID<0.58.0>}
send(pid, {:get, :hello, self()}) #=> {:get, :hello, #PID<0.41.0>}
flush() #=> nil :ok
#+END_SRC

At first, the process map has no keys,
so =sending= a ~:get~ message and then =flushing= the current process inbox =returns= ~nil~.
Let's send a ~:put~ messasge and try it again:
#+BEGIN_SRC elixir
send(pid, {:put, :hello, :world}) #=> {:put, :hello, :world}
send(pid, {:get, :hello, self()}) #=> {:get, :hello, #PID<0.41.0>}
flush() #=> :world :ok
#+END_SRC

Notice how the process is =keeping= a state and we can =get= and =update=
this state by =sending= the process message. (because map's keys =are= unique)
In fact, any process that =knows= the ~pid~ above
will be able to =send= it messages and =manipulate= the state.

It is also =possible= to =register= the ~pid~ =giving= it a name,
and =allowing= everyone that =knows= the name to =send= it messages:
#+BEGIN_SRC elixir
Process.register(pid, :kv) #=> true
send(:kv, {:get, :hello, self()}) #=> {:get, :hello, $PID<0.41.0>}
flush() #=> :world :ok
#+END_SRC
   
=Using= processes to =maintain= state and name registration
=are= very common patterns in Elixir application.
However, most of the time, we won't =implement= those patterns manually as above,
but by =using= one of the many abstractions that =ship= with Elixir.
For example, Elixir =provides= [[https://hexdocs.pm/elixir/Agent.html][agents]], which =are= simple abstractions around state:
#+BEGIN_SRC elixir
{:ok, pid} = Agent.start_link(fn -> %{} end) #=> {:ok, #PID<0.58.0>}
Agent.update(pid, fn map -> Map.put(map, :hello, :world) end) #=> :ok
Agent.get(pid, fn map -> Map.get(map, :hello) end) #=> :world
#+END_SRC

A ~:name~ option could also be =given= to ~Agent.start_link/2~
and it would be automatically =registered=.
Besides agents, Elixir =provides= an API for =building= generic servers (called ~GenServer~),
tasks, and more, all =powered= by processes underneath.
Those, along with supervision trees,
will be =explored= with more detail in the *Mix and OTP guide*
which will =build= a complete Elixir application from start fo finish.

For now, let's =move= on and =explore= the world of I/O in Elixir.
