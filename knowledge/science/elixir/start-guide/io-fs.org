* IO and the file system
  This chapter =is= an introduction to input/output mechanisms,
  file-system-related tasks,
  and related modules such as ~IO~, ~File~, and ~Path~.
  The IO system =provides= a great opportunity to =shed= some light on 
  some philosophies and curiosities of Elixir and the VM.

** The ~IO~ module
   The ~IO~ module is the main mechanism in Elixir for reading and writing to standard input/output
   (~:stdio~),standard error (~:stderr~),files,and other IO devices.
   =Usage= of the module =is= pretty straightforward:
   #+BEGIN_SRC elixir
   IO.puts("hello world") 
   #=> hello world 
   #=> :ok
   IO.gets("yes or no? ") 
   #=> yes or no? yes
   #=> "yes\n"
   #+END_SRC

   By default, functions in the ~IO~ module 
   =read= from the standard input and =write= to the standard output.
   We can =change= that by =passing=, for example, ~:stderr~ as an argument 
   (in order to =write= to the standard error device):
   #+BEGIN_SRC elixir
   IO.puts(:stderr, "hello world")
   #=> hello world
   #=> :ok
   #+END_SRC

** The ~File~ module
   The ~File~ module =contains= functions that =allow= us to =open= files as IO devices.
   By default, files are =opened= in binary mode,
   which =require= developers to =use= the specific ~IO.binread/2~ and ~IO.binwrite/2~ functions 
   from the ~IO~ module.
   #+BEGIN_SRC elixir
   {:ok, file} = File.open("path/to/file/hello", [:write]) #=> {:ok, #PID<0.58.0>}
   IO.binwrite(file, "world") #=> :ok
   File.close(file) #=> :ok
   File.read("path/to/file/hello") #=> {:ok, "world"}
   #+END_SRC

   A file can also be =opened= with ~:utf8~ encoding,
   which =tells= the ~File~ module to =interpret= the bytes =read= from the file as UTF-8-encoded bytes.

   Besides functions for =opening=, =reading= and =writing= files,
   the ~File~ module =has= many functions to =work= with the file system.
   Those functions are =named= after their UNIX equivalents.
   For example, ~File.rm/1~ can be =used= to =remove= files, ~File.mkdir/1~ to =create= directories,
   ~File.mkdir_p/1~ to =create= directories and all their parent chain.
   There are even ~File.cp_r/2~ and ~File.rm_rf/1~ 
   to respectively =copy= and =remove= files and directories recursively
   (i.e., =copying= and =removing= the contents of the directories too)

   you will also =notice= that functions in the ~File~ module =have= two variants:
   one "regular" variant and another variant with a trailing bang(!).
   For example, when we =read= the ~"hello"~ file in the example above,
   we use ~File.read/1~. Alternatively, we can use ~File.read!/1~:
   #+BEGIN_SRC elixir
   File.read("path/to/file/hello") #=> {:ok, "world"}
   File.read!("path/to/file/hello") #=> "world"
   File.read("path/to/file/unknown") #=> {:error, :enoent}
   File.read!("path/to/file/unknown") #** (File.Error) could not read file "path/to/file/unknown": no such file or directory
   #+END_SRC

   Notice that the version with ~!~ =returns= the contents of the file instead of a tuple,
   and if anything goes wrong the function =raises= an error.

   The version without ~!~ is =preferred= 
   when you =want= to =handle= different outcomes =using= pattern matching:
   #+BEGIN_SRC elixir
   case File.read("path/to/file/hello") do
     {:ok, body} -> # do something with the `body`
     {:error, reason} -> # handle teh error caused by `reason`
   end
   #+END_SRC

   However, if you =expect= the file to be there,
   the bang variation =is= more useful as it =raises= a meaningful error message.
   Avoid writing:
   #+BEGIN_SRC elixir
   {:ok, body} = File.read("path/to/file/unknown")
   #+END_SRC

   as, is case of an error, 
   ~File.read/1~ will return ~{:error, reason}~ and the pattern matching will =fail=.
   You will still =get= the desired result (a raised error),
   but the message will be about the pattern which doesn't match
   (thus =being= cryptic in respect to what the error actually =is= about)

   Therefore, if you don't =want= to =handle= the error outcomes,
   =prefer= to =use= the functions ending with an exclamation mark, such as ~File.read!/1~.

** The path module
   The majority of the functions in the ~File~ module =expect= paths as arguments.
   Most commonly, those paths will =be= regular binaries.
   The [[https://hexdocs.pm/elixir/Path.html][Path]] module =provides= facilities for =working= with such paths:
   #+BEGIN_SRC elixir
   Path.join("foo", "bar") #=> "foo/bar"
   Path.expand("~/hello") #=>  "/Users/skoler/hello"
   #+END_SRC

   =Using= functions from the ~Path~ module as opposed to directly =manipulating= strings 
   is =preferred= since the ~Path~ module =takes= care of different operating systems transparently.
   Finally, =keep= in mind that Elixir will automaticaly =convert= slashed(/) into backslashs(\) 
   on Windows when =performing= file operations.

   With this, we =have= =covered= the main modules
   that Elixir =provides= for =dealing= with IO and =interacting= with the file system.
   In the next section, we will =peek= a bit under the covers 
   and =learn= how the IO system is =implemented= in the ~VM~.
** Processes
   You may =have= =noticed= that ~File.open/2~ =returns= a tuple like ~{:ok, pid}~:
   #+BEGIN_SRC elixir
   {:ok, file} = File.open("hello", [:write]) #=> {:ok, #PID<0.58.0>}
   #+END_SRC

   This =happens= because the ~IO~ module actually =works= with processes (see [[file:./processes.org][chapter 11]]).
   Given a file =is= a process,
   when you =write= to a file that has been =closed=,
   you =are= actually =sending= a message to a process which has been =terminated=:
   #+BEGIN_SRC elixir
   File.close(file) #=> :ok
   IO.write(file, "is anybody out there")
   #** (ErlangError) Erlang error: :terminated:
   # * 1st argument: the device has terminated
   #   (stdlib 5.0) io.erl:94: :io.put_chars(#PID<0.58.0>, "is anybody out there")
   #   iex:4: (file)
   #+END_SRC

   Let's =see= in more detail what =happens= when you =request= ~IO.write(pid, binary)~.
   The ~IO~ module =sends= a message to the process =identified= by ~pid~ with the =desired= operation.
   A small ad-hoc process can =help= us =see= it:
   #+BEGIN_SRC elixir
   pid = spawn(fn ->
     receive do: (msg -> IO.inspect msg)
   end) #PID<0.58.0>
   IO.write(pid, "hello")
   #=> {:io_request, #PID<0.58.0>, #Reference<0.0.8.91>,
   #    {:put_chars, :unicode, "hello"}}
   #** (ErlangError) erlang error: :terminated
   #+END_SRC

   After ~IO.write/2~, we can =see= the request =sent= by the ~IO~ module =printed= out (a four-elements tuple).
   Soon after that, we =see= that it =fails= since the ~IO~ module =expected= some kind of result,
   which we did not =supply=.

   By =modeling= IO devices with processes,
   the Erlang ~VM~ =allows= IO messages to be =routed= between different nodes =running= Distributed Erlang
   or even =exchange= files to =perform= read/write operations across nodes.

** iodata and chardata
   In all of the examples above, we =used= binaries when =writing= to files.
   However, most of the IO functions in Elixir also =accept= either "iodata" or "chardata"

   One of the main reasons for =using= "iodata" and "chardata" =is= for performance.
   For example, =imagine= you =need= to =greet= someone in your application.
   #+BEGIN_SRC elixir
   name = "Mary"
   IO.puts("Hello" <> name <> "!")
   #+END_SRC

   =Given= strings in Elixir =are= immutable,as most data structures,
   the example above will =copy= the string "Mary" into the new "Hello Mary!" string.
   While this =is= unlikely to =matter= for the short string as above,
   =copying= can be quite =expensive= for large strings!
   For this reason, the IO functions in Elixir =allow= you to =pass= instead a list of strings:
   #+BEGIN_SRC elixir
   name = "Mary"
   IO.puts(["Hwllo ", name, "!"])
   #+END_SRC

   In the examples above, there =is= no copying.
   Instead we =create= a list that =contains= the original name.
   We =call= such lists either "iodata" or "chardata" 
   and we will =learn= the precise difference between them soon.

   Those lists =are= very useful 
   because it can actually =simplify= the processing strings in several scenarios.
   For example, =imagine= you =have= a list of values,
   such as ~["apple", "banana", "lemon"]~ that you =want= to =write= to disk =separated= by commas.
   How can you =achieve= this?

   One options =is= to =use= ~Enum.join/2~ and =convert= the values to a string:
   #+BEGIN_SRC elixir
   Enum.join(["apple", "banana", "lemon"], ",")  #=> "apple,banana,lemon"
   #+END_SRC

   The above =returns= a new string by =copying= each value into the new string.
   However, with the knowledge in this section,
   we know that we can =pass= a list of strings to the IO/File functions.
   So instead we can do:
   #+BEGIN_SRC elixir
   Enum.intersperse(["apple", "banana", "lemon"], ",") #=> ["apple", ",", "banana", ",", "lemon"]
   #+END_SRC

   "iodata" and "chardata" do not only =contain= strings,
   but they may =contain= arbitrary =nested= lists of strings too:
   #+BEGIN_SRC elixir
   IO.puts(["apple", [",", "banana", [",", "lemon"]]])
   #+END_SRC

   "iodata" and "chardata" may also =contain= integers.
   For example, we could =print= our comma =separated= list of values by =using= ~?,~ as separator,
   which =is= the integer =representing= a comma (44):
   #+BEGIN_SRC elixir
   IO.puts(["apple", ?,, "banana", ?,, "lemon"])
   #+END_SRC

   The difference between "iodata" and "chardata" =is= precisely what said integer represents.
   For chardata, the integers =represent= Unicode codepints.
   For ASCII characters, the byte representation =is= the same as te codepoint representation,
   so it =fits= both classifications.
   However, the default IO device =works= with chardata, which =means= we can =do=:
   #+BEGIN_SRC elixir
   IO.puts([?O, ?l, ?รก, ?\s, "Mary", ?!])
   #+END_SRC

   Overall, integers in a list may =represent= either a bunch of bytes or a bunch of characters
   and which one to =use= depends on the encoding of the IO device.
   If the file =is= =opened= without encoding, the file =is= =expected= to =be= in raw mode,
   and the functions in the ~IO~ module =starting= with ~bin*~ must =be= =used=.
   Those functions =expect= an ~iodata~ as an argument, where integers in the list would =represent= bytes.

   On the other hand, the default IO device (~:stdio~) and files =opened= with ~:utf8~ encoding 
   =work= with the =remaining= functions in the ~IO~ module.
   If you =pass= binaries, or list of binaries, then there =is= no ambiguity.

   Finaly, there =is= on last construct =called= charlist,
   which =is= a special case of chardata 
   where we =have= a list in which all of its values =are= intergers =representing= Unicode codepints.
   They can be created with the ~~c~ sigil:
   #+BEGIN_SRC elixir
   ~c"hello" #=> ~c"hello"
   #+END_SRC

   /Note: the above is printed as 'hello' in Elixir v1.14 and earlier,/
   /which is deprecated syntax for charlists./

   They mostly =show= up when =interfacing= with Erlang,
   as some Erlang APIs =use= charlist as their representation for strings.
   For this reason, any list =containing= printable ASCII codepoints will =be= =printed= as a charlist:
   #+BEGIN_SRC elixir
   [?a, ?b, ?c] #=> ~c"abc"
   #+END_SRC

   We =packed= a lot into this small section, so let's =break= in down:
   - iodata and chardata =are= list of binaries and integers.
     Those binaries and integers can =be= arbitrarily nested inside lists.
     Their goal =is= to =give= flexibility and preformance when =working= with IO devices and files.
   - the choice between iodata and chardata =depends= on the encoding of the IO device.
     If the file =is= =opened= without encoding, the file =expects= iodata,
     and the functions in the ~IO~ module =starting= with ~bin*~ must =be= =used=.
     The default IO device (~:stdio~) and files =opened= with ~:utf8~ encoding
     =expect= chardata and =work= with the =remaining= fucntions in the ~IO~ module.
   - charlists =are= a special case of chardata, where it exclusively =uses= a list of integers Unicode codepoints.
     They can =be= =created= with the ~~c~ sigil.
     Lists of integers =are= automaticlly =printed= =using= the ~~c~ sigil
     if all integers in a list =represent= printable ASCII codepoints.

     This =finishes= our tour of IO devices and IO =related= functionaliy.
     We =have= =learned= about three Elixir modules - ~IO~, ~File~, and ~Path~ - as well as 
     how the VM =uses= processes for the underlying IO mechanisms 
     and how to =use= ~chardata~ and ~iodata~ for IO operations.
