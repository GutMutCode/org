#+title: Router

* Table of Contents :toc:
- [[#what-is-router][What is Router?]]
- [[#http-request-correspondings][HTTP request correspondings]]
- [[#investgating-routes][Investgating Routes]]
- [[#add-route-presets][Add route presets]]
  - [[#sellected-routes][Sellected routes]]
  - [[#nested-routes][Nested routes]]
- [[#verified-routes][Verified Routes]]
  - [[#what-means-verified][What means Verified]]
  - [[#more-verified][More verified]]
- [[#nested-routes-1][Nested Routes]]
- [[#scoped-routes][Scoped routes]]
- [[#pipeline][Pipeline]]
  - [[#built-in-pipeline][Built-in pipeline]]

* What is Router?
A set of code that mapping request's verb/path pairs to controller/action pairs for dispatching

- ~router.ex~ is generated by Phoenix

* HTTP request correspondings
#+begin_src elixir
get "/", PageController, :home
#+end_src

Router have get, post, put, patch, delete, options, connect, trace and head

* Investgating Routes

Show all routes in current mix project
#+begin_src sh
mix phx.routes
#+end_src

* Add route presets

A ~Phoenix.Route.resouces/4~ function add routes for ~obj_name~:
#+begin_src elixir
scope "path", app_name do
  resources "obj_name", reponsible_controller_name
end
#+end_src

and check:
#+begin_src sh
mix phx.routes
#+end_src

Then you can see CRUD requests routes preset
#+RESULTS: GET  /obj_name  YourAppWeb.Obj_nameController :index


** Sellected routes
You can =select= specific routes by add a list of action at the end of the resources phrase
#+begin_src elixir
resources "obj_name", reponsible_controller_name, [:index, :show, etc...]
#+end_src

Also you can =except= specific routes by add it
#+begin_src elixir
resources "obj_name", reponsible_controller_name, except: [:index, :show, etc...]
#+end_src

** Nested routes
We also have a ~many-to-one~ relationship

- =User(one)= can create many =posts(many)=
- =User(one)= can create many =comments(many)=

  #+begin_src elixir
  resources "/users", UserController do
    resources "/posts", PostController
  end
  #+end_src

  #+results: GET  /users/:user_id/posts/id  YourAppWeb.PostController :show

* Verified Routes
~Phoenix.VerifiedRoutes~ can compile-time checks of router paths against your router by using the ~~p~ sigil.

** What means Verified
Check if the route paths in controllers, tests, and tempalates compiler will make sure those actually match routes defined in your router

#+begin_src elixir
defmodule RouteExample do
  use DiscordWeb, :verified_routes

  def example do
    # these will be checked by :verified_routes
    ~p"/comments"
    ~p"/unknown/123"
  end
end
#+end_src

** More verified
*** Using with query & dictionary
#+begin_src elixir
~p"/users/17?admin=true&active=false"
# "/users/17?admin=true&active=false"

~p"/users/17?#{[admin: true]}"
# "/users/17?admin=true"
#+end_src

*** Using with URL (~Phoenix.VerifiedRoutes.url/1~)
#+begin_src elixir
url(~p"/users")
# "http://localhost:4000/users" - will get host, port, proxy, and SSL information in `config/dev.exs`
#+end_src

* Nested Routes
#+begin_src elixir
user_id = 42
post_id = 17

~p"/users/#{user_id}/posts/#{post_id}"

# Interpolatation %User{id}, %Post{id} into ~p by Phoenix.Param
~p"/users/#{user}/posts/#{post}"

# "/users/42/posts/17"
#+end_src

We don't need to change any of our ~~p~ while we change a component of the struct

* Scoped routes
Group routes under a common path prefix and scoped set of plugs

- admin functionality
- API
- versioned APIs

**** Circumstance
User -> Review

Admin -> Approve Review

They don't share controller between them -> You can use =Scope=

* Pipeline
A set of [[file:./plug.org][plugs]] used within scope

Once a route matches, Phoenix =invokes all plugs= defined in all =pipelines= associated to that route

** Built-in pipeline
*** :browser
Render requests for a browser

**** :accepts, ["html"]
Defines the accpeted request format to html

**** :fetch_session
Fetches the session data and makes it available in the connection

**** :fetch_live_flash
- Fetches ay flash messages from LiveView
- Merge them with the controller flash messages

**** :put_root_layout
Store the root layout for rendering purposes

**** :put_from_forgery
Protect from posts from cross-site forgery

**** :put_secur_browser_headers
Protect from posts from cross-site forgery

*** :api
Prepare data producing for an API

**** :accepts, ["json"]
Defines the accpeted request format to json
