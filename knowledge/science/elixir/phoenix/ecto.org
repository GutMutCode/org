#+title: Ecto

* Ecto library
** A database library for Phoenix
plugs and protocol implementations for using phoenix with ecto

** short instruction
Blog - project name
User - table name of schema

#+begin_src elixir
alias Blog.{Repo,User}

changeset = User.changeset(%User{}, %{field: "value"})
changeset.valid?
changeset.errors

Repo.insert(%User{field: "value"})
Repo.all(User)
Repo.one(from u in User, where: ilike(u.email, "%1%"), select: count(u.id))

# change output of select
Repo.all(from u in User, select: count(u.id))
Repo.all(from u in User, select: %{u.id => u.email})
#+end_src

** changeset
Simply =validate= some data to store to our database.
- Removing invalid params
- Refusing invalid values
- Stripping bad data that is unable to be cast (according to our schema)
- Saving inspecting result, highlight the error data

** Data persistence
Ecto repositiories are the =interface= into a storage system, be it a database like PostgreSQL or an external service like a =RESTful API=.
The ~Repo~ module's purpose is to take care of the finer details of persistence and data querying for us.
As the caller, we only care about fetching and persisting data.
The ~Repo~ module takes care of the underlying database adapter communication, connection pooling, and error translation for database constraint violations.

Let's head back over to IEx with ~iex -S mix~, and insert a couple of users into the database.

#+begin_src bash
alias Hello.{Repo, User}
[Hello.Repo, Hello.User]

Repo.insert(%User{email: "user1@example.com"})
[debug] QUERY OK db=6.5ms queue=0.5ms idle=1358.3ms
INSERT INTO "users" ("email","inserted_at","updated_at") VALUES ($1,$2,$3) RETURNING "id" ["user1@example.com", ~N[2021-02-25 01:58:55], ~N[2021-02-25 01:58:55]]
...

Repo.insert(%User{email: "user2@example.com"})
[debug] QUERY OK db=1.3ms idle=1402.7ms
INSERT INTO "users" ("email","inserted_at","updated_at") VALUES ($1,$2,$3) RETURNING "id" ["user2@example.com", ~N[2021-02-25 02:03:28], ~N[2021-02-25 02:03:28]]
...
#+end_src

We started by aliasing our ~User~ and ~Repo~ modules for easy access.
Next, we called ~Repo.insert/2~ with a User struct.
Since we are in the ~dev~ environment, we can see the debug logs for the query our repository performed when inserting the underlying ~%User{}~ data.
We received a two-element tuple back with ~{:ok, %User{}}~, which lets us know the insertion was successful.

We could also insert a user by passing a changeset to ~Repo.insert/2~.
If the changeset is valid, the repository will use an optimized database query to insert the record, and return a two-element tuple back, as above.

If the changeset is not valid, we receive a two-element tuple consisting of ~:error~ plus the invalid changeset.

With a couple of users inserted, let's fetch them back out of the repo.

#+begin_src bash
Repo.all(User)
[debug] QUERY OK source="users" db=5.8ms queue=1.4ms idle=1672.0ms
SELECT u0."id", u0."bio", u0."email", u0."name", u0."number_of_pets", u0."inserted_at", u0."updated_at" FROM "users" AS u0 []
#+end_src

That was easy! ~Repo.all/1~ takes a data source, our ~User~ schema in this case, and translates that to an underlying SQL query against our database.
After it fetches the data, the Repo then uses our Ecto schema to map the database values back into Elixir data structures according to our ~User~ schema.
We're not just limited to basic querying -- Ecto includes a full-fledged query DSL for advanced SQL generation.
In addition to a natural Elixir DSL, Ecto's query engine gives us multiple great features, such as SQL injection protection and compile-time optimization of queries.
Let's try it out.
#+begin_src bash
import Ecto.Query
Ecto.Query

Repo.all(from u in User, select: u.email)
[debug] QUERY OK source="users" db=0.8ms queue=0.9ms idle=1634.0ms
SELECT u0."email" FROM "users" AS u0 []
["user1@example.com", "user2@example.com"]
#+end_src

First, we imported ~Ecto.Query~, which imports the ~from/2~ macro of Ecto's Query DSL.
Next, we build a query which selects all the email addreses in our users table.
Let's try another example.
#+begin_src bash
Repo.one(from u in User, where: ilike(u.email, "%1%"),
                               select: count(u.id))
[debug] QUERY OK source="users" db=1.6ms SELECT count(u0."id") FROM "users" AS u0 WHERE (u0."email" ILIKE '%1%') []
1
#+end_src

Now we're starting to get a taste of Ecto's rich querying capabilities.
We used ~Repo.one/2~ to fetch the count of all users with an email address containing ~1~, and recieved the expected count in return.
This jsut scratches the surface of Ecto's query interface, and much more is supported such as sub-querying, interval queries, and advanced select statements.
For example, let's build a query to fetch a map of all user id's to their email addresses.
#+begin_src bash
Repo.all(from u in User, select: %{u.id => u.email})
[debug] QUERY OK source="users" db=0.9ms
SELECT u0."id", u0."email" FROM "users" AS u0 []
[
  %{1 => "user1@example.com"},
  %{2 => "user2@example.com"}
]
#+end_src


That little query packed a big punch.
It both fetched all user emails from the database and efficiently build a map of the results in one go.
You should browse the ~Ecto.Query documentation~ to see the breadth of supported query features.

In addition to inserts, we can also perform updates and deletes with ~Repo.update/2~ and ~Repo.delete/2~ to update of delete a single schema.
Ecto also supports bulk persistence with the ~Repo.insert_all/3~, ~Repo.update_all/3~, and ~Repo.delete_all/2~ functions.

There is quite a bit more that Ecto can do and we've only barely scratched the surface.
With a solid Ecto foundation in place, we're now ready to continue building our app and integrate the web-facing application with our backend persistence.
Along the way, we'll expand our Ecto knowledge and learn how to properly isolate our web interface from the underlying details of our system.
Please take a look at the [[https://hexdocs.pm/ecto/Ecto.html][Ecto documentation]] for the rest of the story,.

In our ~context guide~, we'll find out how to wrap up our Ecto access and business logic behind modules that group related functionality.
We'll see how Phoenix helps us design maintainable applications, and we'll find out about other neat Ecto features along the way.
