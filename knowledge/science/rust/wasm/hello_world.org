#+title: Hello World

* Hello, World!
This section will show you how to build and run your first Rust and WebAssembly program: a Web page that alerts "Hello, World!"

Make sure you have followed the [[file:./setup.org][setup instructions]] before beginning.

** Clone the Project Template
The project template comes pre-configured with same defaults, so you can quickly build, integrate, and package your code for the Web.

Clone the project template with this command:
#+begin_src bash
cargo generate --git https://github.com/rustwasm/wasm-pack-template
#+end_src

This should prompt you for the new project's name.
We will use *"wasm-game-of-life"*
#+begin_src bash
wasm-game-of-life
#+end_src

** What's Inside
Enter the new ~wasm-game-of-life~ project
#+begin_src bash
cd wasm-game-of-life
#+end_src

and let's take a look at its contents:
#+begin_src tree
wasm-game-of-life/
├── Cargo.toml
├── LICENSE_APACHE
├── LICENSE_MIT
├── README.md
└── src
    ├── lib.rs
    └── utils.rs
#+end_src

Let's make a look at a couple of these files in detail.

*** ~Cargo.toml~
The ~Cargo.toml~ file specifies dependencies and metadata for ~cargo~, Rust's package manger and build tool.
This one comes pre-configured with a ~wasm-bindgen~ dependency, a few optional dependencies we will dig into later, and the ~crate-type~ properly initialized for generating ~.wasm~ libraries.

*** ~lib.rs~
THe ~src/lib.rs~ file is the root of the Rust crate that we are compiling to WebAssembly.
It uses ~wasm-bindgen~ to interface with JavaScript.
It imports the ~window.alert~ JavaScript function, and exports the ~greet~ Rust function, which alerts a greeting message.

Filename: src/lib.rs
...

*** ~src/utils.rs~
The ~src/utils.rs~ module provides common utilities to make working with Rust compiled to WebAssembly easier.
We will take a look at some of these utilities in more detail later in the tutorial, such as when we look at [[https://rustwasm.github.io/docs/book/game-of-life/debugging.html][debugging our wasm code]], but we can ignore this file for now.

** Build the Project
We use ~wasm-pack~ to orchestrate the following build steps:

- Ensure that we have Rust 1.30 or newer and the ~wasm32-unknown-unknown~ target installed via ~rustup~,

- Compile our Rust sources into a WebAssembly ~.wasm~ binary via ~cargo~,

- Use ~wasm-bindgen~ to generate the JavaScript API for using our Rust-generated WebAssembly.

To do all of that, run this command inside the project directory:
#+begin_src bash
wasm-pack build
#+end_src

When the build has completed, we can find its artifacts in the ~pkg~ directory, and it should have these contents:
#+begin_src tree
pkg/
├── package.json
├── README.md
├── wasm_game_of_life_bg.wasm.d.ts
├── wasm_game_of_life_bg.wasm
├── wasm_game_of_life_bg.js
├── wasm_game_of_life.d.ts
└── wasm_game_of_life.js
#+end_src

The ~README.md~ file is copied from the main project, but the others are completely new.

*** ~pkg/wasm_game_of_life_bg.wasm~
The ~.wasm~ file is the WebAssembly binary that is generated by the Rust compiler from our Rust sources.
It contains the compiled-to-wasm versions of all of our Rust functions and data.
For example, it has an exported "greet" function.

*** ~pkg/wasm_game_of_life.js~ and ~pkg/wasm_game_of_life_bg.js~
The ~.js~ file is generated by ~wasm-bindgen~ and contains JavaScript glue for importing DOM and JavaScript functions into Rust and exposing a nice API to the WebAssembly functions to JavaScript.
For example, there is a JavaScript ~greet~ function that wraps the ~greet~ function exported from the WebAssembly module.
Right now, this glue isn't doing much, but when we start passing more interesting values back and forth between wasm and JavaScript, it will help shepherd those values across the boundary.

Filename: pkg/wasm_game_of_life_bg.js
...

*** ~pkg/wasm_game_of_life.d.ts~ and ~pkg/wasm_game_of_life_bg.d.ts~
The ~.d.ts~ file contains ~TypeScript~ type declaratioons for the JavaScript glue.
If you are using TypeScript, you can have your calls into WebAssembly functions type checked, and your IDE can provide autocompletions and suggestions!
If you aren't using TypeScript, you can safely ignore this file.
#+begin_src typescript
export function greet(): void;
#+end_src

*** ~pkg/package.json~
[[https://docs.npmjs.com/cli/v9/configuring-npm/package-json][The ~package.json~ file contains metadata about the generated JavaScript and WebAssembly package.]]
This is used by npm and JavaScript bundlers to determine dependencies across packages, package names, versions, and a bunch or other stuff.
It helps us integrate with JavaScript tooling and allows us to publish our package to npm.
#+begin_src json
{
  "name": "wasm-game-of-life",
  "collaborators": [
    "Your Name <your.email@example.com>"
  ],
  "description": null,
  "version": "0.1.0",
  "license": null,
  "repository": null,
  "files": [
    "wasm_game_of_life_bg.wasm",
    "wasm_game_of_life.d.ts"
  ],
  "main": "wasm_game_of_life.js",
  "types": "wasm_game_of_life.d.ts"
}
#+end_src

** Putting it into a Web Page
To take our ~wasm-game-of-life~ package and use it in a Web page, we use [[https://github.com/rustwasm/create-wasm-app][the ~create-wasm-app~ JavaScript project template]].

Run this command within the ~wasm-game-of-life~ directory:
#+begin_src bash
npm init wasm-app www
#+end_src

Here's what our new ~wasm-game-of-life/www~ subdirectory contains:
#+begin_src tree
wasm-game-of-life/www/
├── bootstrap.js
├── index.html
├── index.js
├── LICENSE-APACHE
├── LICENSE-MIT
├── package.json
├── README.md
└── webpack.config.js
#+end_src

Once again, let's take a closer look at some of these files.

*** ~www/package.json~
This ~package.json~ comes pre-configured with ~webpack~ and ~webpack-dev-server~ dependencies, as well as dependency on ~hello-wasm-pack~, which is a version of the initial ~wasm-pack-template~ package that has been published to npm.

*** ~www/webpack.config.js~
This file configures webpack and its local development server.
If comes pre-configured, and you shouldn't have to tweak this at all to get webpack and its local development server working.

*** ~www/index.html~
This is the root HTML file for the Web page.
It doesn't do much other than load ~bootstrap.js~, which is a very thin wrapper around ~index.js~.

Filename: www/index.html
...

*** ~www/index.js~
The ~index.js~ is the main entry point for our Web page's JavaScript.
It imports the ~hello-wasm-pack~ npm package, which contains the default ~wasm-pack-template~'s compiled WebAssembly and JavaScript glue, then it calls ~hello-wasm-pack~'s ~greet~ function.

#+begin_src js
import * as wasm from "hello-wasm-pack";

wasm.greet();
#+end_src
** Install the dependencies
First, ensure that the local development server and its dependencies are installed by running ~npm install~ within the ~wasm-game-of-life/www~ subdirectory:
#+begin_src bash
npm install
#+end_src

This command only needs to be run once, and will install the ~webpack~ JavaScript bundler and its development server.
#+begin_quote
Note that ~webpack~ is not required for working with Rust and WebAssembly, it is just the bundler and development server we've chosen for convenience here.
Parcel and Rollup should also support importing WebAssembly as ECMAScript modules.
You can also use Rust and WebAssembly [[https://rustwasm.github.io/docs/wasm-bindgen/examples/without-a-bundler.html][without a bundler]] if you prefer!
#+end_quote

** Using our Local ~wasm-game-of-life~ Package in ~www~
Rather than use the ~hello-wasm-pack~ package from npm, we wan to use our local ~wasm-game-of-life~ package instead.
This will allow us to incrementally develop our Game of Life program.

Open up ~wasm-game-of-life/www/package.json~ and next to ~"devDependencies"~ ,add the ~"dependencies"~ field, including a ~"wasm-game-of-life": "file:../pkg"~ entry:
#+begin_src json
{
  // ...
  "dependencies": {                     // Add this three lines block!
    "wasm-game-of-life": "file:../pkg"
  },
  "devDependencies": {
    //...
  }
}
#+end_src

Next, modify ~wasm-game-of-life/www/index.js~ to import ~wasm-game-of-life~ instead of the ~hello-wasm-pack~ package:
#+begin_src js
import * as wasm from "wasm-game-of-life";

wasm.greet();
#+end_src

Since we declared a new dependency, we need to install it:
#+begin_src bash
npm install
#+end_src

Our Web pabe is now ready to be served locally!

** Serving Locally
Next, open a new terminal for the development server.
Running the server in a new terminal lets us leave it running in the background, and doesn't block us from running other commands in the meantime.
In the new terminal, run this command from within the ~wasm-game-of-life/www~ directory:

#+begin_src bash
npm run start
#+end_src

When you got error code ~"ERR_OSSL_EVP_UNSUPPORTED"~, follow this [[https://sebhastian.com/error-0308010c-digital-envelope-routines-unsupported/][instructions]].

Navigate your Web browser to http:://localhost:8080/ and you should be greeted with an alert message.
...

Anytime you make changes and wan them reflected on server, just re-run the ~wasm-pack build~ command within the ~wasm-game-of-life~ directory.
